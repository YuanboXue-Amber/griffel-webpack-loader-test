diff --git a/node_modules/@griffel/core/__styles.cjs.js b/node_modules/@griffel/core/__styles.cjs.js
index c41ff9e..1cec883 100644
--- a/node_modules/@griffel/core/__styles.cjs.js
+++ b/node_modules/@griffel/core/__styles.cjs.js
@@ -2,6 +2,10 @@
 
 Object.defineProperty(exports, '__esModule', { value: true });
 
+require('./constants.cjs.js');
+var store = require('./devtools/store.cjs.js');
+var isDevToolsEnabled = require('./devtools/isDevToolsEnabled.cjs.js');
+var getSourceLocation = require('./devtools/getSourceLocation.cjs.js');
 var reduceToClassNameForSlots = require('./runtime/reduceToClassNameForSlots.cjs.js');
 
 /**
@@ -14,6 +18,11 @@ function __styles(classesMapBySlot, cssRules) {
   const insertionCache = {};
   let ltrClassNamesForSlots = null;
   let rtlClassNamesForSlots = null;
+  let sourceLocation;
+
+  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled.isDevToolsEnabled) {
+    sourceLocation = getSourceLocation.getSourceLocation();
+  }
 
   function computeClasses(options) {
     const {
@@ -39,7 +48,13 @@ function __styles(classesMapBySlot, cssRules) {
       insertionCache[rendererId] = true;
     }
 
-    return isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
+    const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
+
+    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled.isDevToolsEnabled) {
+      store.debugData.addSequenceDetails(classNamesForSlots, sourceLocation);
+    }
+
+    return classNamesForSlots;
   }
 
   return computeClasses;
diff --git a/node_modules/@griffel/core/__styles.cjs.js.map b/node_modules/@griffel/core/__styles.cjs.js.map
index bd05b14..b53f073 100644
--- a/node_modules/@griffel/core/__styles.cjs.js.map
+++ b/node_modules/@griffel/core/__styles.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"__styles.cjs.js","sources":["../../../packages/core/src/__styles.ts"],"sourcesContent":["import { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { MakeStylesOptions, CSSClassesMapBySlot, CSSRulesByBucket } from './types';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n\n    return isLTR ? (ltrClassNamesForSlots as Record<Slots, string>) : (rtlClassNamesForSlots as Record<Slots, string>);\n  }\n\n  return computeClasses;\n}\n"],"names":["__styles","classesMapBySlot","cssRules","insertionCache","ltrClassNamesForSlots","rtlClassNamesForSlots","computeClasses","options","dir","renderer","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules"],"mappings":";;;;;;AAGA;;;;;;SAKgBA,SACdC,kBACAC;AAEA,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;;AAEA,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;AAEA,UAAMG,KAAK,GAAGF,GAAG,KAAK,KAAtB;;AAEA,UAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAZ,GAAiBH,QAAQ,CAACG,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIN,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGS,mDAAyB,CAACZ,gBAAD,EAAmBO,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIH,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGQ,mDAAyB,CAACZ,gBAAD,EAAmBO,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIL,cAAc,CAACQ,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CL,MAAAA,QAAQ,CAACM,cAAT,CAAwBb,QAAxB;AACAC,MAAAA,cAAc,CAACQ,UAAD,CAAd,GAA6B,IAA7B;AACD;;AAED,WAAOD,KAAK,GAAIN,qBAAJ,GAAuDC,qBAAnE;AACD;;AAED,SAAOC,cAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"__styles.cjs.js","sources":["../../../packages/core/src/__styles.ts"],"sourcesContent":["import { debugData, DebugSourceLoc, getSourceLocation, isDevToolsEnabled } from './devtools';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { MakeStylesOptions, CSSClassesMapBySlot, CSSRulesByBucket } from './types';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceLocation: DebugSourceLoc | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceLocation = getSourceLocation();\n  }\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceLocation);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["__styles","classesMapBySlot","cssRules","insertionCache","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceLocation","process","env","NODE_ENV","isDevToolsEnabled","getSourceLocation","computeClasses","options","dir","renderer","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;;;;AAIA;;;;;;SAKgBA,SACdC,kBACAC;AAEA,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;AAEA,MAAIC,cAAJ;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;AAC9DJ,IAAAA,cAAc,GAAGK,mCAAiB,EAAlC;AACD;;AAED,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;AAEA,UAAMG,KAAK,GAAGF,GAAG,KAAK,KAAtB;;AAEA,UAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAZ,GAAiBH,QAAQ,CAACG,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIZ,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGe,mDAAyB,CAAClB,gBAAD,EAAmBa,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIT,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGc,mDAAyB,CAAClB,gBAAD,EAAmBa,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIX,cAAc,CAACc,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CL,MAAAA,QAAQ,CAACM,cAAT,CAAwBnB,QAAxB;AACAC,MAAAA,cAAc,CAACc,UAAD,CAAd,GAA6B,IAA7B;AACD;;AAED,UAAMK,kBAAkB,GAAGN,KAAK,GAC3BZ,qBAD2B,GAE3BC,qBAFL;;AAIA,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;AAC9Da,MAAAA,eAAS,CAACC,kBAAV,CAA6BF,kBAA7B,EAAkDhB,cAAlD;AACD;;AAED,WAAOgB,kBAAP;AACD;;AAED,SAAOV,cAAP;AACD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/__styles.esm.js b/node_modules/@griffel/core/__styles.esm.js
index 374ee5c..20aef4a 100644
--- a/node_modules/@griffel/core/__styles.esm.js
+++ b/node_modules/@griffel/core/__styles.esm.js
@@ -1,3 +1,7 @@
+import './constants.esm.js';
+import { debugData } from './devtools/store.esm.js';
+import { isDevToolsEnabled } from './devtools/isDevToolsEnabled.esm.js';
+import { getSourceLocation } from './devtools/getSourceLocation.esm.js';
 import { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots.esm.js';
 
 /**
@@ -10,6 +14,11 @@ function __styles(classesMapBySlot, cssRules) {
   const insertionCache = {};
   let ltrClassNamesForSlots = null;
   let rtlClassNamesForSlots = null;
+  let sourceLocation;
+
+  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {
+    sourceLocation = getSourceLocation();
+  }
 
   function computeClasses(options) {
     const {
@@ -35,7 +44,13 @@ function __styles(classesMapBySlot, cssRules) {
       insertionCache[rendererId] = true;
     }
 
-    return isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
+    const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
+
+    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {
+      debugData.addSequenceDetails(classNamesForSlots, sourceLocation);
+    }
+
+    return classNamesForSlots;
   }
 
   return computeClasses;
diff --git a/node_modules/@griffel/core/__styles.esm.js.map b/node_modules/@griffel/core/__styles.esm.js.map
index ae5ff24..6fd4040 100644
--- a/node_modules/@griffel/core/__styles.esm.js.map
+++ b/node_modules/@griffel/core/__styles.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"__styles.esm.js","sources":["../../../packages/core/src/__styles.ts"],"sourcesContent":["import { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { MakeStylesOptions, CSSClassesMapBySlot, CSSRulesByBucket } from './types';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n\n    return isLTR ? (ltrClassNamesForSlots as Record<Slots, string>) : (rtlClassNamesForSlots as Record<Slots, string>);\n  }\n\n  return computeClasses;\n}\n"],"names":["__styles","classesMapBySlot","cssRules","insertionCache","ltrClassNamesForSlots","rtlClassNamesForSlots","computeClasses","options","dir","renderer","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules"],"mappings":";;AAGA;;;;;;SAKgBA,SACdC,kBACAC;AAEA,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;;AAEA,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;AAEA,UAAMG,KAAK,GAAGF,GAAG,KAAK,KAAtB;;AAEA,UAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAZ,GAAiBH,QAAQ,CAACG,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIN,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGS,yBAAyB,CAACZ,gBAAD,EAAmBO,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIH,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGQ,yBAAyB,CAACZ,gBAAD,EAAmBO,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIL,cAAc,CAACQ,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CL,MAAAA,QAAQ,CAACM,cAAT,CAAwBb,QAAxB;AACAC,MAAAA,cAAc,CAACQ,UAAD,CAAd,GAA6B,IAA7B;AACD;;AAED,WAAOD,KAAK,GAAIN,qBAAJ,GAAuDC,qBAAnE;AACD;;AAED,SAAOC,cAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"__styles.esm.js","sources":["../../../packages/core/src/__styles.ts"],"sourcesContent":["import { debugData, DebugSourceLoc, getSourceLocation, isDevToolsEnabled } from './devtools';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { MakeStylesOptions, CSSClassesMapBySlot, CSSRulesByBucket } from './types';\n\n/**\n * A version of makeStyles() that accepts build output as an input and skips all runtime transforms.\n *\n * @internal\n */\nexport function __styles<Slots extends string>(\n  classesMapBySlot: CSSClassesMapBySlot<Slots>,\n  cssRules: CSSRulesByBucket,\n) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceLocation: DebugSourceLoc | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceLocation = getSourceLocation();\n  }\n\n  function computeClasses(options: Pick<MakeStylesOptions, 'dir' | 'renderer'>): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceLocation);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["__styles","classesMapBySlot","cssRules","insertionCache","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceLocation","process","env","NODE_ENV","isDevToolsEnabled","getSourceLocation","computeClasses","options","dir","renderer","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;AAIA;;;;;;SAKgBA,SACdC,kBACAC;AAEA,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;AAEA,MAAIC,cAAJ;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,iBAA7C,EAAgE;AAC9DJ,IAAAA,cAAc,GAAGK,iBAAiB,EAAlC;AACD;;AAED,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;AAEA,UAAMG,KAAK,GAAGF,GAAG,KAAK,KAAtB;;AAEA,UAAMG,UAAU,GAAGD,KAAK,GAAGD,QAAQ,CAACG,EAAZ,GAAiBH,QAAQ,CAACG,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIZ,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGe,yBAAyB,CAAClB,gBAAD,EAAmBa,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIT,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGc,yBAAyB,CAAClB,gBAAD,EAAmBa,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIX,cAAc,CAACc,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CL,MAAAA,QAAQ,CAACM,cAAT,CAAwBnB,QAAxB;AACAC,MAAAA,cAAc,CAACc,UAAD,CAAd,GAA6B,IAA7B;AACD;;AAED,UAAMK,kBAAkB,GAAGN,KAAK,GAC3BZ,qBAD2B,GAE3BC,qBAFL;;AAIA,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,iBAA7C,EAAgE;AAC9Da,MAAAA,SAAS,CAACC,kBAAV,CAA6BF,kBAA7B,EAAkDhB,cAAlD;AACD;;AAED,WAAOgB,kBAAP;AACD;;AAED,SAAOV,cAAP;AACD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/getDebugTree.cjs.js b/node_modules/@griffel/core/devtools/getDebugTree.cjs.js
index b218cee..ccebba8 100644
--- a/node_modules/@griffel/core/devtools/getDebugTree.cjs.js
+++ b/node_modules/@griffel/core/devtools/getDebugTree.cjs.js
@@ -39,6 +39,7 @@ function getDebugTree(debugSequenceHash, parentNode) {
 
       if (mapData) {
         node.slot = mapData.slotName;
+        node.sourceLoc = mapData.sourceLoc;
       }
 
       const cssRule = store.debugData.getCSSRules().find(cssRule => {
diff --git a/node_modules/@griffel/core/devtools/getDebugTree.cjs.js.map b/node_modules/@griffel/core/devtools/getDebugTree.cjs.js.map
index 057c9ef..32609b7 100644
--- a/node_modules/@griffel/core/devtools/getDebugTree.cjs.js.map
+++ b/node_modules/@griffel/core/devtools/getDebugTree.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"getDebugTree.cjs.js","sources":["../../../../packages/core/src/devtools/getDebugTree.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { LookupItem, SequenceHash } from '../types';\nimport { debugData } from './store';\nimport { DebugSequence } from './types';\nimport { getDebugClassNames } from './utils';\n\nexport function getDebugTree(debugSequenceHash: SequenceHash, parentNode?: DebugSequence) {\n  const lookupItem: LookupItem | undefined = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode?.debugClassNames);\n\n  const node: DebugSequence = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames,\n  };\n\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences.forEach((sequence: SequenceHash) => {\n    const child = getDebugTree(sequence, node);\n    if (child) {\n      node.children.push(child);\n    }\n  });\n\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(({ className }) => {\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n      }\n\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n\n      node.rules![className] = cssRule!;\n    });\n  }\n\n  return node;\n}\n"],"names":["getDebugTree","debugSequenceHash","parentNode","lookupItem","DEFINITION_LOOKUP_TABLE","undefined","parentLookupItem","sequenceHash","debugClassNames","getDebugClassNames","node","direction","children","childrenSequences","debugData","getChildrenSequences","forEach","sequence","child","push","length","rules","className","mapData","getSequenceDetails","slot","slotName","cssRule","getCSSRules","find","includes"],"mappings":";;;;;;;;SAMgBA,aAAaC,mBAAiCC;AAC5D,QAAMC,UAAU,GAA2BC,iCAAuB,CAACH,iBAAD,CAAlE;;AACA,MAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC5B,WAAOA,SAAP;AACD;;AAED,QAAMC,gBAAgB,GAAGJ,UAAU,GAAGE,iCAAuB,CAACF,UAAU,CAACK,YAAZ,CAA1B,GAAsDF,SAAzF;AACA,QAAMG,eAAe,GAAGC,wBAAkB,CAACN,UAAD,EAAaG,gBAAb,EAA+BJ,UAAU,SAAV,IAAAA,UAAU,WAAV,SAAA,GAAAA,UAAU,CAAEM,eAA3C,CAA1C;AAEA,QAAME,IAAI,GAAkB;AAC1BH,IAAAA,YAAY,EAAEN,iBADY;AAE1BU,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAFK;AAG1BS,IAAAA,QAAQ,EAAE,EAHgB;AAI1BJ,IAAAA;AAJ0B,GAA5B;AAOA,QAAMK,iBAAiB,GAAGC,eAAS,CAACC,oBAAV,CAA+BL,IAAI,CAACH,YAApC,CAA1B;AACAM,EAAAA,iBAAiB,CAACG,OAAlB,CAA2BC,QAAD;AACxB,UAAMC,KAAK,GAAGlB,YAAY,CAACiB,QAAD,EAAWP,IAAX,CAA1B;;AACA,QAAIQ,KAAJ,EAAW;AACTR,MAAAA,IAAI,CAACE,QAAL,CAAcO,IAAd,CAAmBD,KAAnB;AACD;AACF,GALD;;AAQA,MAAI,CAACR,IAAI,CAACE,QAAL,CAAcQ,MAAnB,EAA2B;AACzBV,IAAAA,IAAI,CAACW,KAAL,GAAa,EAAb;AACAX,IAAAA,IAAI,CAACF,eAAL,CAAqBQ,OAArB,CAA6B,CAAC;AAAEM,MAAAA;AAAF,KAAD;AAC3B,YAAMC,OAAO,GAAGT,eAAS,CAACU,kBAAV,CAA6BvB,iBAA7B,CAAhB;;AACA,UAAIsB,OAAJ,EAAa;AACXb,QAAAA,IAAI,CAACe,IAAL,GAAYF,OAAO,CAACG,QAApB;AACD;;AAED,YAAMC,OAAO,GAAGb,eAAS,CAACc,WAAV,GAAwBC,IAAxB,CAA6BF,OAAO;AAClD,eAAOA,OAAO,CAACG,QAAR,CAAiBR,SAAjB,CAAP;AACD,OAFe,CAAhB;AAIAZ,MAAAA,IAAI,CAACW,KAAL,CAAYC,SAAZ,IAAyBK,OAAzB;AACD,KAXD;AAYD;;AAED,SAAOjB,IAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"getDebugTree.cjs.js","sources":["../../../../packages/core/src/devtools/getDebugTree.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { LookupItem, SequenceHash } from '../types';\nimport { debugData } from './store';\nimport { DebugSequence } from './types';\nimport { getDebugClassNames } from './utils';\n\nexport function getDebugTree(debugSequenceHash: SequenceHash, parentNode?: DebugSequence) {\n  const lookupItem: LookupItem | undefined = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode?.debugClassNames);\n\n  const node: DebugSequence = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames,\n  };\n\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences.forEach((sequence: SequenceHash) => {\n    const child = getDebugTree(sequence, node);\n    if (child) {\n      node.children.push(child);\n    }\n  });\n\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(({ className }) => {\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n        node.sourceLoc = mapData.sourceLoc;\n      }\n\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n\n      node.rules![className] = cssRule!;\n    });\n  }\n\n  return node;\n}\n"],"names":["getDebugTree","debugSequenceHash","parentNode","lookupItem","DEFINITION_LOOKUP_TABLE","undefined","parentLookupItem","sequenceHash","debugClassNames","getDebugClassNames","node","direction","children","childrenSequences","debugData","getChildrenSequences","forEach","sequence","child","push","length","rules","className","mapData","getSequenceDetails","slot","slotName","sourceLoc","cssRule","getCSSRules","find","includes"],"mappings":";;;;;;;;SAMgBA,aAAaC,mBAAiCC;AAC5D,QAAMC,UAAU,GAA2BC,iCAAuB,CAACH,iBAAD,CAAlE;;AACA,MAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC5B,WAAOA,SAAP;AACD;;AAED,QAAMC,gBAAgB,GAAGJ,UAAU,GAAGE,iCAAuB,CAACF,UAAU,CAACK,YAAZ,CAA1B,GAAsDF,SAAzF;AACA,QAAMG,eAAe,GAAGC,wBAAkB,CAACN,UAAD,EAAaG,gBAAb,EAA+BJ,UAAU,SAAV,IAAAA,UAAU,WAAV,SAAA,GAAAA,UAAU,CAAEM,eAA3C,CAA1C;AAEA,QAAME,IAAI,GAAkB;AAC1BH,IAAAA,YAAY,EAAEN,iBADY;AAE1BU,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAFK;AAG1BS,IAAAA,QAAQ,EAAE,EAHgB;AAI1BJ,IAAAA;AAJ0B,GAA5B;AAOA,QAAMK,iBAAiB,GAAGC,eAAS,CAACC,oBAAV,CAA+BL,IAAI,CAACH,YAApC,CAA1B;AACAM,EAAAA,iBAAiB,CAACG,OAAlB,CAA2BC,QAAD;AACxB,UAAMC,KAAK,GAAGlB,YAAY,CAACiB,QAAD,EAAWP,IAAX,CAA1B;;AACA,QAAIQ,KAAJ,EAAW;AACTR,MAAAA,IAAI,CAACE,QAAL,CAAcO,IAAd,CAAmBD,KAAnB;AACD;AACF,GALD;;AAQA,MAAI,CAACR,IAAI,CAACE,QAAL,CAAcQ,MAAnB,EAA2B;AACzBV,IAAAA,IAAI,CAACW,KAAL,GAAa,EAAb;AACAX,IAAAA,IAAI,CAACF,eAAL,CAAqBQ,OAArB,CAA6B,CAAC;AAAEM,MAAAA;AAAF,KAAD;AAC3B,YAAMC,OAAO,GAAGT,eAAS,CAACU,kBAAV,CAA6BvB,iBAA7B,CAAhB;;AACA,UAAIsB,OAAJ,EAAa;AACXb,QAAAA,IAAI,CAACe,IAAL,GAAYF,OAAO,CAACG,QAApB;AACAhB,QAAAA,IAAI,CAACiB,SAAL,GAAiBJ,OAAO,CAACI,SAAzB;AACD;;AAED,YAAMC,OAAO,GAAGd,eAAS,CAACe,WAAV,GAAwBC,IAAxB,CAA6BF,OAAO;AAClD,eAAOA,OAAO,CAACG,QAAR,CAAiBT,SAAjB,CAAP;AACD,OAFe,CAAhB;AAIAZ,MAAAA,IAAI,CAACW,KAAL,CAAYC,SAAZ,IAAyBM,OAAzB;AACD,KAZD;AAaD;;AAED,SAAOlB,IAAP;AACD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/getDebugTree.esm.js b/node_modules/@griffel/core/devtools/getDebugTree.esm.js
index 8132e42..0398da3 100644
--- a/node_modules/@griffel/core/devtools/getDebugTree.esm.js
+++ b/node_modules/@griffel/core/devtools/getDebugTree.esm.js
@@ -35,6 +35,7 @@ function getDebugTree(debugSequenceHash, parentNode) {
 
       if (mapData) {
         node.slot = mapData.slotName;
+        node.sourceLoc = mapData.sourceLoc;
       }
 
       const cssRule = debugData.getCSSRules().find(cssRule => {
diff --git a/node_modules/@griffel/core/devtools/getDebugTree.esm.js.map b/node_modules/@griffel/core/devtools/getDebugTree.esm.js.map
index 55ae7c1..b79d9dd 100644
--- a/node_modules/@griffel/core/devtools/getDebugTree.esm.js.map
+++ b/node_modules/@griffel/core/devtools/getDebugTree.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"getDebugTree.esm.js","sources":["../../../../packages/core/src/devtools/getDebugTree.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { LookupItem, SequenceHash } from '../types';\nimport { debugData } from './store';\nimport { DebugSequence } from './types';\nimport { getDebugClassNames } from './utils';\n\nexport function getDebugTree(debugSequenceHash: SequenceHash, parentNode?: DebugSequence) {\n  const lookupItem: LookupItem | undefined = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode?.debugClassNames);\n\n  const node: DebugSequence = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames,\n  };\n\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences.forEach((sequence: SequenceHash) => {\n    const child = getDebugTree(sequence, node);\n    if (child) {\n      node.children.push(child);\n    }\n  });\n\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(({ className }) => {\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n      }\n\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n\n      node.rules![className] = cssRule!;\n    });\n  }\n\n  return node;\n}\n"],"names":["getDebugTree","debugSequenceHash","parentNode","lookupItem","DEFINITION_LOOKUP_TABLE","undefined","parentLookupItem","sequenceHash","debugClassNames","getDebugClassNames","node","direction","children","childrenSequences","debugData","getChildrenSequences","forEach","sequence","child","push","length","rules","className","mapData","getSequenceDetails","slot","slotName","cssRule","getCSSRules","find","includes"],"mappings":";;;;SAMgBA,aAAaC,mBAAiCC;AAC5D,QAAMC,UAAU,GAA2BC,uBAAuB,CAACH,iBAAD,CAAlE;;AACA,MAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC5B,WAAOA,SAAP;AACD;;AAED,QAAMC,gBAAgB,GAAGJ,UAAU,GAAGE,uBAAuB,CAACF,UAAU,CAACK,YAAZ,CAA1B,GAAsDF,SAAzF;AACA,QAAMG,eAAe,GAAGC,kBAAkB,CAACN,UAAD,EAAaG,gBAAb,EAA+BJ,UAAU,SAAV,IAAAA,UAAU,WAAV,SAAA,GAAAA,UAAU,CAAEM,eAA3C,CAA1C;AAEA,QAAME,IAAI,GAAkB;AAC1BH,IAAAA,YAAY,EAAEN,iBADY;AAE1BU,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAFK;AAG1BS,IAAAA,QAAQ,EAAE,EAHgB;AAI1BJ,IAAAA;AAJ0B,GAA5B;AAOA,QAAMK,iBAAiB,GAAGC,SAAS,CAACC,oBAAV,CAA+BL,IAAI,CAACH,YAApC,CAA1B;AACAM,EAAAA,iBAAiB,CAACG,OAAlB,CAA2BC,QAAD;AACxB,UAAMC,KAAK,GAAGlB,YAAY,CAACiB,QAAD,EAAWP,IAAX,CAA1B;;AACA,QAAIQ,KAAJ,EAAW;AACTR,MAAAA,IAAI,CAACE,QAAL,CAAcO,IAAd,CAAmBD,KAAnB;AACD;AACF,GALD;;AAQA,MAAI,CAACR,IAAI,CAACE,QAAL,CAAcQ,MAAnB,EAA2B;AACzBV,IAAAA,IAAI,CAACW,KAAL,GAAa,EAAb;AACAX,IAAAA,IAAI,CAACF,eAAL,CAAqBQ,OAArB,CAA6B,CAAC;AAAEM,MAAAA;AAAF,KAAD;AAC3B,YAAMC,OAAO,GAAGT,SAAS,CAACU,kBAAV,CAA6BvB,iBAA7B,CAAhB;;AACA,UAAIsB,OAAJ,EAAa;AACXb,QAAAA,IAAI,CAACe,IAAL,GAAYF,OAAO,CAACG,QAApB;AACD;;AAED,YAAMC,OAAO,GAAGb,SAAS,CAACc,WAAV,GAAwBC,IAAxB,CAA6BF,OAAO;AAClD,eAAOA,OAAO,CAACG,QAAR,CAAiBR,SAAjB,CAAP;AACD,OAFe,CAAhB;AAIAZ,MAAAA,IAAI,CAACW,KAAL,CAAYC,SAAZ,IAAyBK,OAAzB;AACD,KAXD;AAYD;;AAED,SAAOjB,IAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"getDebugTree.esm.js","sources":["../../../../packages/core/src/devtools/getDebugTree.ts"],"sourcesContent":["import { DEFINITION_LOOKUP_TABLE } from '../constants';\nimport { LookupItem, SequenceHash } from '../types';\nimport { debugData } from './store';\nimport { DebugSequence } from './types';\nimport { getDebugClassNames } from './utils';\n\nexport function getDebugTree(debugSequenceHash: SequenceHash, parentNode?: DebugSequence) {\n  const lookupItem: LookupItem | undefined = DEFINITION_LOOKUP_TABLE[debugSequenceHash];\n  if (lookupItem === undefined) {\n    return undefined;\n  }\n\n  const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : undefined;\n  const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode?.debugClassNames);\n\n  const node: DebugSequence = {\n    sequenceHash: debugSequenceHash,\n    direction: lookupItem[1],\n    children: [],\n    debugClassNames,\n  };\n\n  const childrenSequences = debugData.getChildrenSequences(node.sequenceHash);\n  childrenSequences.forEach((sequence: SequenceHash) => {\n    const child = getDebugTree(sequence, node);\n    if (child) {\n      node.children.push(child);\n    }\n  });\n\n  // if it's leaf (makeStyle node), get css rules\n  if (!node.children.length) {\n    node.rules = {};\n    node.debugClassNames.forEach(({ className }) => {\n      const mapData = debugData.getSequenceDetails(debugSequenceHash);\n      if (mapData) {\n        node.slot = mapData.slotName;\n        node.sourceLoc = mapData.sourceLoc;\n      }\n\n      const cssRule = debugData.getCSSRules().find(cssRule => {\n        return cssRule.includes(className);\n      });\n\n      node.rules![className] = cssRule!;\n    });\n  }\n\n  return node;\n}\n"],"names":["getDebugTree","debugSequenceHash","parentNode","lookupItem","DEFINITION_LOOKUP_TABLE","undefined","parentLookupItem","sequenceHash","debugClassNames","getDebugClassNames","node","direction","children","childrenSequences","debugData","getChildrenSequences","forEach","sequence","child","push","length","rules","className","mapData","getSequenceDetails","slot","slotName","sourceLoc","cssRule","getCSSRules","find","includes"],"mappings":";;;;SAMgBA,aAAaC,mBAAiCC;AAC5D,QAAMC,UAAU,GAA2BC,uBAAuB,CAACH,iBAAD,CAAlE;;AACA,MAAIE,UAAU,KAAKE,SAAnB,EAA8B;AAC5B,WAAOA,SAAP;AACD;;AAED,QAAMC,gBAAgB,GAAGJ,UAAU,GAAGE,uBAAuB,CAACF,UAAU,CAACK,YAAZ,CAA1B,GAAsDF,SAAzF;AACA,QAAMG,eAAe,GAAGC,kBAAkB,CAACN,UAAD,EAAaG,gBAAb,EAA+BJ,UAAU,SAAV,IAAAA,UAAU,WAAV,SAAA,GAAAA,UAAU,CAAEM,eAA3C,CAA1C;AAEA,QAAME,IAAI,GAAkB;AAC1BH,IAAAA,YAAY,EAAEN,iBADY;AAE1BU,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAFK;AAG1BS,IAAAA,QAAQ,EAAE,EAHgB;AAI1BJ,IAAAA;AAJ0B,GAA5B;AAOA,QAAMK,iBAAiB,GAAGC,SAAS,CAACC,oBAAV,CAA+BL,IAAI,CAACH,YAApC,CAA1B;AACAM,EAAAA,iBAAiB,CAACG,OAAlB,CAA2BC,QAAD;AACxB,UAAMC,KAAK,GAAGlB,YAAY,CAACiB,QAAD,EAAWP,IAAX,CAA1B;;AACA,QAAIQ,KAAJ,EAAW;AACTR,MAAAA,IAAI,CAACE,QAAL,CAAcO,IAAd,CAAmBD,KAAnB;AACD;AACF,GALD;;AAQA,MAAI,CAACR,IAAI,CAACE,QAAL,CAAcQ,MAAnB,EAA2B;AACzBV,IAAAA,IAAI,CAACW,KAAL,GAAa,EAAb;AACAX,IAAAA,IAAI,CAACF,eAAL,CAAqBQ,OAArB,CAA6B,CAAC;AAAEM,MAAAA;AAAF,KAAD;AAC3B,YAAMC,OAAO,GAAGT,SAAS,CAACU,kBAAV,CAA6BvB,iBAA7B,CAAhB;;AACA,UAAIsB,OAAJ,EAAa;AACXb,QAAAA,IAAI,CAACe,IAAL,GAAYF,OAAO,CAACG,QAApB;AACAhB,QAAAA,IAAI,CAACiB,SAAL,GAAiBJ,OAAO,CAACI,SAAzB;AACD;;AAED,YAAMC,OAAO,GAAGd,SAAS,CAACe,WAAV,GAAwBC,IAAxB,CAA6BF,OAAO;AAClD,eAAOA,OAAO,CAACG,QAAR,CAAiBT,SAAjB,CAAP;AACD,OAFe,CAAhB;AAIAZ,MAAAA,IAAI,CAACW,KAAL,CAAYC,SAAZ,IAAyBM,OAAzB;AACD,KAZD;AAaD;;AAED,SAAOlB,IAAP;AACD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/getSourceLocation.cjs.js b/node_modules/@griffel/core/devtools/getSourceLocation.cjs.js
new file mode 100644
index 0000000..e193473
--- /dev/null
+++ b/node_modules/@griffel/core/devtools/getSourceLocation.cjs.js
@@ -0,0 +1,54 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+// import ErrorStackParser from 'error-stack-parser';
+function getSourceLocation(isRuntimeTransforms = false) {
+  try {
+    throw new Error();
+  } catch (error) {
+    console.log('amber');
+    console.log([String(error.stack)]);
+  }
+
+  return undefined; // const stacks = ErrorStackParser.parse(error);
+  // console.log('amber getSourceLocation', stacks);
+  // const userMakeStyleCall = findUserMakeStyleCallInStacks(stacks, isRuntimeTransforms);
+  // if (!userMakeStyleCall) {
+  //   return undefined;
+  // }
+  // const { lineNumber, columnNumber, fileName } = userMakeStyleCall;
+  // if (lineNumber !== undefined && columnNumber !== undefined && fileName !== undefined) {
+  //   return {
+  //     columnNumber,
+  //     lineNumber,
+  //     sourceURL: fileName,
+  //   };
+  // }
+  // return undefined;
+} // function findUserMakeStyleCallInStacks(stacks: ErrorStackParser.StackFrame[], isRuntimeTransforms = false) {
+//   for (let i = stacks.length - 1; i >= 0; --i) {
+//     if (isRuntimeTransforms) {
+//       if (stacks[i].functionName === 'makeStyles') {
+//         // error call stacks:
+//         // - getSourceLocation
+//         // - makeStyles in griffel core
+//         // - makeStyles in griffel react
+//         // - user makeStyles call
+//         return stacks[i + 1];
+//       }
+//     } else if (stacks[i].functionName === '__styles') {
+//       // error call stacks:
+//       // - getSourceLocation
+//       // - __styles in griffel core
+//       // - __styles in griffel react
+//       // - eval
+//       // - user makeStyles call
+//       return stacks[i + 2];
+//     }
+//   }
+//   return undefined;
+// }
+
+exports.getSourceLocation = getSourceLocation;
+//# sourceMappingURL=getSourceLocation.cjs.js.map
diff --git a/node_modules/@griffel/core/devtools/getSourceLocation.cjs.js.map b/node_modules/@griffel/core/devtools/getSourceLocation.cjs.js.map
new file mode 100644
index 0000000..74d099f
--- /dev/null
+++ b/node_modules/@griffel/core/devtools/getSourceLocation.cjs.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"getSourceLocation.cjs.js","sources":["../../../../packages/core/src/devtools/getSourceLocation.ts"],"sourcesContent":["// import ErrorStackParser from 'error-stack-parser';\n\nexport function getSourceLocation(isRuntimeTransforms = false) {\n  try {\n    throw new Error();\n  } catch (error) {\n    console.log('amber');\n    console.log([String((error as any).stack)]);\n  }\n  return undefined;\n\n  // const stacks = ErrorStackParser.parse(error);\n  // console.log('amber getSourceLocation', stacks);\n  // const userMakeStyleCall = findUserMakeStyleCallInStacks(stacks, isRuntimeTransforms);\n\n  // if (!userMakeStyleCall) {\n  //   return undefined;\n  // }\n\n  // const { lineNumber, columnNumber, fileName } = userMakeStyleCall;\n  // if (lineNumber !== undefined && columnNumber !== undefined && fileName !== undefined) {\n  //   return {\n  //     columnNumber,\n  //     lineNumber,\n  //     sourceURL: fileName,\n  //   };\n  // }\n\n  // return undefined;\n}\n\n// function findUserMakeStyleCallInStacks(stacks: ErrorStackParser.StackFrame[], isRuntimeTransforms = false) {\n//   for (let i = stacks.length - 1; i >= 0; --i) {\n//     if (isRuntimeTransforms) {\n//       if (stacks[i].functionName === 'makeStyles') {\n//         // error call stacks:\n//         // - getSourceLocation\n//         // - makeStyles in griffel core\n//         // - makeStyles in griffel react\n//         // - user makeStyles call\n//         return stacks[i + 1];\n//       }\n//     } else if (stacks[i].functionName === '__styles') {\n//       // error call stacks:\n//       // - getSourceLocation\n//       // - __styles in griffel core\n//       // - __styles in griffel react\n//       // - eval\n//       // - user makeStyles call\n//       return stacks[i + 2];\n//     }\n//   }\n//   return undefined;\n// }\n"],"names":["getSourceLocation","isRuntimeTransforms","Error","error","console","log","String","stack","undefined"],"mappings":";;;;AAAA;SAEgBA,kBAAkBC,mBAAmB,GAAG;AACtD,MAAI;AACF,UAAM,IAAIC,KAAJ,EAAN;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACC,MAAM,CAAEH,KAAa,CAACI,KAAhB,CAAP,CAAZ;AACD;;AACD,SAAOC,SAAP;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/getSourceLocation.d.ts b/node_modules/@griffel/core/devtools/getSourceLocation.d.ts
new file mode 100644
index 0000000..4e950ab
--- /dev/null
+++ b/node_modules/@griffel/core/devtools/getSourceLocation.d.ts
@@ -0,0 +1 @@
+export declare function getSourceLocation(isRuntimeTransforms?: boolean): undefined;
diff --git a/node_modules/@griffel/core/devtools/getSourceLocation.esm.js b/node_modules/@griffel/core/devtools/getSourceLocation.esm.js
new file mode 100644
index 0000000..fa09ef4
--- /dev/null
+++ b/node_modules/@griffel/core/devtools/getSourceLocation.esm.js
@@ -0,0 +1,50 @@
+// import ErrorStackParser from 'error-stack-parser';
+function getSourceLocation(isRuntimeTransforms = false) {
+  try {
+    throw new Error();
+  } catch (error) {
+    console.log('amber');
+    console.log([String(error.stack)]);
+  }
+
+  return undefined; // const stacks = ErrorStackParser.parse(error);
+  // console.log('amber getSourceLocation', stacks);
+  // const userMakeStyleCall = findUserMakeStyleCallInStacks(stacks, isRuntimeTransforms);
+  // if (!userMakeStyleCall) {
+  //   return undefined;
+  // }
+  // const { lineNumber, columnNumber, fileName } = userMakeStyleCall;
+  // if (lineNumber !== undefined && columnNumber !== undefined && fileName !== undefined) {
+  //   return {
+  //     columnNumber,
+  //     lineNumber,
+  //     sourceURL: fileName,
+  //   };
+  // }
+  // return undefined;
+} // function findUserMakeStyleCallInStacks(stacks: ErrorStackParser.StackFrame[], isRuntimeTransforms = false) {
+//   for (let i = stacks.length - 1; i >= 0; --i) {
+//     if (isRuntimeTransforms) {
+//       if (stacks[i].functionName === 'makeStyles') {
+//         // error call stacks:
+//         // - getSourceLocation
+//         // - makeStyles in griffel core
+//         // - makeStyles in griffel react
+//         // - user makeStyles call
+//         return stacks[i + 1];
+//       }
+//     } else if (stacks[i].functionName === '__styles') {
+//       // error call stacks:
+//       // - getSourceLocation
+//       // - __styles in griffel core
+//       // - __styles in griffel react
+//       // - eval
+//       // - user makeStyles call
+//       return stacks[i + 2];
+//     }
+//   }
+//   return undefined;
+// }
+
+export { getSourceLocation };
+//# sourceMappingURL=getSourceLocation.esm.js.map
diff --git a/node_modules/@griffel/core/devtools/getSourceLocation.esm.js.map b/node_modules/@griffel/core/devtools/getSourceLocation.esm.js.map
new file mode 100644
index 0000000..f302dd3
--- /dev/null
+++ b/node_modules/@griffel/core/devtools/getSourceLocation.esm.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"getSourceLocation.esm.js","sources":["../../../../packages/core/src/devtools/getSourceLocation.ts"],"sourcesContent":["// import ErrorStackParser from 'error-stack-parser';\n\nexport function getSourceLocation(isRuntimeTransforms = false) {\n  try {\n    throw new Error();\n  } catch (error) {\n    console.log('amber');\n    console.log([String((error as any).stack)]);\n  }\n  return undefined;\n\n  // const stacks = ErrorStackParser.parse(error);\n  // console.log('amber getSourceLocation', stacks);\n  // const userMakeStyleCall = findUserMakeStyleCallInStacks(stacks, isRuntimeTransforms);\n\n  // if (!userMakeStyleCall) {\n  //   return undefined;\n  // }\n\n  // const { lineNumber, columnNumber, fileName } = userMakeStyleCall;\n  // if (lineNumber !== undefined && columnNumber !== undefined && fileName !== undefined) {\n  //   return {\n  //     columnNumber,\n  //     lineNumber,\n  //     sourceURL: fileName,\n  //   };\n  // }\n\n  // return undefined;\n}\n\n// function findUserMakeStyleCallInStacks(stacks: ErrorStackParser.StackFrame[], isRuntimeTransforms = false) {\n//   for (let i = stacks.length - 1; i >= 0; --i) {\n//     if (isRuntimeTransforms) {\n//       if (stacks[i].functionName === 'makeStyles') {\n//         // error call stacks:\n//         // - getSourceLocation\n//         // - makeStyles in griffel core\n//         // - makeStyles in griffel react\n//         // - user makeStyles call\n//         return stacks[i + 1];\n//       }\n//     } else if (stacks[i].functionName === '__styles') {\n//       // error call stacks:\n//       // - getSourceLocation\n//       // - __styles in griffel core\n//       // - __styles in griffel react\n//       // - eval\n//       // - user makeStyles call\n//       return stacks[i + 2];\n//     }\n//   }\n//   return undefined;\n// }\n"],"names":["getSourceLocation","isRuntimeTransforms","Error","error","console","log","String","stack","undefined"],"mappings":"AAAA;SAEgBA,kBAAkBC,mBAAmB,GAAG;AACtD,MAAI;AACF,UAAM,IAAIC,KAAJ,EAAN;AACD,GAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACC,MAAM,CAAEH,KAAa,CAACI,KAAhB,CAAP,CAAZ;AACD;;AACD,SAAOC,SAAP;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/index.d.ts b/node_modules/@griffel/core/devtools/index.d.ts
index f002204..2d630a9 100644
--- a/node_modules/@griffel/core/devtools/index.d.ts
+++ b/node_modules/@griffel/core/devtools/index.d.ts
@@ -1,4 +1,5 @@
 export { injectDevTools } from './injectDevTools';
 export { isDevToolsEnabled } from './isDevToolsEnabled';
 export { debugData } from './store';
-export type { DebugCSSRules, DebugSequence, DebugResult } from './types';
+export { getSourceLocation } from './getSourceLocation';
+export type { DebugCSSRules, DebugSequence, DebugResult, DebugSourceLoc } from './types';
diff --git a/node_modules/@griffel/core/devtools/store.cjs.js b/node_modules/@griffel/core/devtools/store.cjs.js
index 871340f..bc5df0b 100644
--- a/node_modules/@griffel/core/devtools/store.cjs.js
+++ b/node_modules/@griffel/core/devtools/store.cjs.js
@@ -21,10 +21,11 @@ const debugData = {
   addCSSRule: rule => {
     cssRules.push(rule);
   },
-  addSequenceDetails: classNamesForSlots => {
+  addSequenceDetails: (classNamesForSlots, sourceLoc) => {
     Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
       sequenceDetails[sequenceHash.substring(0, constants.SEQUENCE_SIZE)] = {
-        slotName
+        slotName,
+        sourceLoc
       };
     });
   },
diff --git a/node_modules/@griffel/core/devtools/store.cjs.js.map b/node_modules/@griffel/core/devtools/store.cjs.js.map
index db94b5f..7b55029 100644
--- a/node_modules/@griffel/core/devtools/store.cjs.js.map
+++ b/node_modules/@griffel/core/devtools/store.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"store.cjs.js","sources":["../../../../packages/core/src/devtools/store.ts"],"sourcesContent":["import { SequenceHash } from '../types';\nimport { SEQUENCE_PREFIX, SEQUENCE_SIZE } from '../constants';\nimport { mergeClassesCachedResults } from '../mergeClasses';\n\nconst sequenceDetails: Record<SequenceHash, { slotName: string }> = {};\n\nconst cssRules: string[] = [];\n\nexport const debugData = {\n  getChildrenSequences: (debugSequenceHash: SequenceHash): SequenceHash[] => {\n    const key = Object.keys(mergeClassesCachedResults).find(key =>\n      mergeClassesCachedResults[key].startsWith(debugSequenceHash),\n    );\n\n    if (key) {\n      // key of the mergeClasses cache contains merge order\n      return key\n        .split(SEQUENCE_PREFIX)\n        .filter(sequence => sequence.length)\n        .map(sequence => SEQUENCE_PREFIX + sequence);\n    }\n\n    return [];\n  },\n\n  addCSSRule: (rule: string) => {\n    cssRules.push(rule);\n  },\n  addSequenceDetails: <Slots extends string | number>(classNamesForSlots: Record<Slots, string>) => {\n    Object.entries<string>(classNamesForSlots).forEach(([slotName, sequenceHash]) => {\n      sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = { slotName };\n    });\n  },\n\n  getCSSRules: (): string[] => {\n    return cssRules;\n  },\n  getSequenceDetails: (sequenceHash: SequenceHash): typeof sequenceDetails[string] | undefined => {\n    return sequenceDetails[sequenceHash];\n  },\n};\n"],"names":["sequenceDetails","cssRules","debugData","getChildrenSequences","debugSequenceHash","key","Object","keys","mergeClassesCachedResults","find","startsWith","split","SEQUENCE_PREFIX","filter","sequence","length","map","addCSSRule","rule","push","addSequenceDetails","classNamesForSlots","entries","forEach","slotName","sequenceHash","substring","SEQUENCE_SIZE","getCSSRules","getSequenceDetails"],"mappings":";;;;;;;AAIA,MAAMA,eAAe,GAA+C,EAApE;AAEA,MAAMC,QAAQ,GAAa,EAA3B;MAEaC,SAAS,GAAG;AACvBC,EAAAA,oBAAoB,EAAGC,iBAAD;AACpB,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYC,sCAAZ,EAAuCC,IAAvC,CAA4CJ,GAAG,IACzDG,sCAAyB,CAACH,GAAD,CAAzB,CAA+BK,UAA/B,CAA0CN,iBAA1C,CADU,CAAZ;;AAIA,QAAIC,GAAJ,EAAS;AACP;AACA,aAAOA,GAAG,CACPM,KADI,CACEC,yBADF,EAEJC,MAFI,CAEGC,QAAQ,IAAIA,QAAQ,CAACC,MAFxB,EAGJC,GAHI,CAGAF,QAAQ,IAAIF,yBAAe,GAAGE,QAH9B,CAAP;AAID;;AAED,WAAO,EAAP;AACD,GAfsB;AAiBvBG,EAAAA,UAAU,EAAGC,IAAD;AACVjB,IAAAA,QAAQ,CAACkB,IAAT,CAAcD,IAAd;AACD,GAnBsB;AAoBvBE,EAAAA,kBAAkB,EAAkCC,kBAAhC;AAClBf,IAAAA,MAAM,CAACgB,OAAP,CAAuBD,kBAAvB,EAA2CE,OAA3C,CAAmD,CAAC,CAACC,QAAD,EAAWC,YAAX,CAAD;AACjDzB,MAAAA,eAAe,CAACyB,YAAY,CAACC,SAAb,CAAuB,CAAvB,EAA0BC,uBAA1B,CAAD,CAAf,GAA4D;AAAEH,QAAAA;AAAF,OAA5D;AACD,KAFD;AAGD,GAxBsB;AA0BvBI,EAAAA,WAAW,EAAE;AACX,WAAO3B,QAAP;AACD,GA5BsB;AA6BvB4B,EAAAA,kBAAkB,EAAGJ,YAAD;AAClB,WAAOzB,eAAe,CAACyB,YAAD,CAAtB;AACD;AA/BsB;;;;"}
\ No newline at end of file
+{"version":3,"file":"store.cjs.js","sources":["../../../../packages/core/src/devtools/store.ts"],"sourcesContent":["import type { SequenceHash } from '../types';\nimport { SEQUENCE_PREFIX, SEQUENCE_SIZE } from '../constants';\nimport { mergeClassesCachedResults } from '../mergeClasses';\nimport type { DebugSourceLoc } from './types';\n\nconst sequenceDetails: Record<SequenceHash, { slotName: string; sourceLoc?: DebugSourceLoc }> = {};\n\nconst cssRules: string[] = [];\n\nexport const debugData = {\n  getChildrenSequences: (debugSequenceHash: SequenceHash): SequenceHash[] => {\n    const key = Object.keys(mergeClassesCachedResults).find(key =>\n      mergeClassesCachedResults[key].startsWith(debugSequenceHash),\n    );\n\n    if (key) {\n      // key of the mergeClasses cache contains merge order\n      return key\n        .split(SEQUENCE_PREFIX)\n        .filter(sequence => sequence.length)\n        .map(sequence => SEQUENCE_PREFIX + sequence);\n    }\n\n    return [];\n  },\n\n  addCSSRule: (rule: string) => {\n    cssRules.push(rule);\n  },\n  addSequenceDetails: <Slots extends string | number>(\n    classNamesForSlots: Record<Slots, string>,\n    sourceLoc?: DebugSourceLoc,\n  ) => {\n    Object.entries<string>(classNamesForSlots).forEach(([slotName, sequenceHash]) => {\n      sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = { slotName, sourceLoc };\n    });\n  },\n\n  getCSSRules: (): string[] => {\n    return cssRules;\n  },\n  getSequenceDetails: (sequenceHash: SequenceHash): typeof sequenceDetails[string] | undefined => {\n    return sequenceDetails[sequenceHash];\n  },\n};\n"],"names":["sequenceDetails","cssRules","debugData","getChildrenSequences","debugSequenceHash","key","Object","keys","mergeClassesCachedResults","find","startsWith","split","SEQUENCE_PREFIX","filter","sequence","length","map","addCSSRule","rule","push","addSequenceDetails","classNamesForSlots","sourceLoc","entries","forEach","slotName","sequenceHash","substring","SEQUENCE_SIZE","getCSSRules","getSequenceDetails"],"mappings":";;;;;;;AAKA,MAAMA,eAAe,GAA2E,EAAhG;AAEA,MAAMC,QAAQ,GAAa,EAA3B;MAEaC,SAAS,GAAG;AACvBC,EAAAA,oBAAoB,EAAGC,iBAAD;AACpB,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYC,sCAAZ,EAAuCC,IAAvC,CAA4CJ,GAAG,IACzDG,sCAAyB,CAACH,GAAD,CAAzB,CAA+BK,UAA/B,CAA0CN,iBAA1C,CADU,CAAZ;;AAIA,QAAIC,GAAJ,EAAS;AACP;AACA,aAAOA,GAAG,CACPM,KADI,CACEC,yBADF,EAEJC,MAFI,CAEGC,QAAQ,IAAIA,QAAQ,CAACC,MAFxB,EAGJC,GAHI,CAGAF,QAAQ,IAAIF,yBAAe,GAAGE,QAH9B,CAAP;AAID;;AAED,WAAO,EAAP;AACD,GAfsB;AAiBvBG,EAAAA,UAAU,EAAGC,IAAD;AACVjB,IAAAA,QAAQ,CAACkB,IAAT,CAAcD,IAAd;AACD,GAnBsB;AAoBvBE,EAAAA,kBAAkB,EAAE,CAClBC,kBADkB,EAElBC,SAFkB;AAIlBhB,IAAAA,MAAM,CAACiB,OAAP,CAAuBF,kBAAvB,EAA2CG,OAA3C,CAAmD,CAAC,CAACC,QAAD,EAAWC,YAAX,CAAD;AACjD1B,MAAAA,eAAe,CAAC0B,YAAY,CAACC,SAAb,CAAuB,CAAvB,EAA0BC,uBAA1B,CAAD,CAAf,GAA4D;AAAEH,QAAAA,QAAF;AAAYH,QAAAA;AAAZ,OAA5D;AACD,KAFD;AAGD,GA3BsB;AA6BvBO,EAAAA,WAAW,EAAE;AACX,WAAO5B,QAAP;AACD,GA/BsB;AAgCvB6B,EAAAA,kBAAkB,EAAGJ,YAAD;AAClB,WAAO1B,eAAe,CAAC0B,YAAD,CAAtB;AACD;AAlCsB;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/store.d.ts b/node_modules/@griffel/core/devtools/store.d.ts
index e74a37a..323213a 100644
--- a/node_modules/@griffel/core/devtools/store.d.ts
+++ b/node_modules/@griffel/core/devtools/store.d.ts
@@ -1,11 +1,13 @@
-import { SequenceHash } from '../types';
+import type { SequenceHash } from '../types';
+import type { DebugSourceLoc } from './types';
 declare const sequenceDetails: Record<SequenceHash, {
     slotName: string;
+    sourceLoc?: DebugSourceLoc;
 }>;
 export declare const debugData: {
     getChildrenSequences: (debugSequenceHash: SequenceHash) => SequenceHash[];
     addCSSRule: (rule: string) => void;
-    addSequenceDetails: <Slots extends string | number>(classNamesForSlots: Record<Slots, string>) => void;
+    addSequenceDetails: <Slots extends string | number>(classNamesForSlots: Record<Slots, string>, sourceLoc?: DebugSourceLoc | undefined) => void;
     getCSSRules: () => string[];
     getSequenceDetails: (sequenceHash: SequenceHash) => typeof sequenceDetails[string] | undefined;
 };
diff --git a/node_modules/@griffel/core/devtools/store.esm.js b/node_modules/@griffel/core/devtools/store.esm.js
index 597b915..bf7802a 100644
--- a/node_modules/@griffel/core/devtools/store.esm.js
+++ b/node_modules/@griffel/core/devtools/store.esm.js
@@ -17,10 +17,11 @@ const debugData = {
   addCSSRule: rule => {
     cssRules.push(rule);
   },
-  addSequenceDetails: classNamesForSlots => {
+  addSequenceDetails: (classNamesForSlots, sourceLoc) => {
     Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
       sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
-        slotName
+        slotName,
+        sourceLoc
       };
     });
   },
diff --git a/node_modules/@griffel/core/devtools/store.esm.js.map b/node_modules/@griffel/core/devtools/store.esm.js.map
index 212389b..089844c 100644
--- a/node_modules/@griffel/core/devtools/store.esm.js.map
+++ b/node_modules/@griffel/core/devtools/store.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"store.esm.js","sources":["../../../../packages/core/src/devtools/store.ts"],"sourcesContent":["import { SequenceHash } from '../types';\nimport { SEQUENCE_PREFIX, SEQUENCE_SIZE } from '../constants';\nimport { mergeClassesCachedResults } from '../mergeClasses';\n\nconst sequenceDetails: Record<SequenceHash, { slotName: string }> = {};\n\nconst cssRules: string[] = [];\n\nexport const debugData = {\n  getChildrenSequences: (debugSequenceHash: SequenceHash): SequenceHash[] => {\n    const key = Object.keys(mergeClassesCachedResults).find(key =>\n      mergeClassesCachedResults[key].startsWith(debugSequenceHash),\n    );\n\n    if (key) {\n      // key of the mergeClasses cache contains merge order\n      return key\n        .split(SEQUENCE_PREFIX)\n        .filter(sequence => sequence.length)\n        .map(sequence => SEQUENCE_PREFIX + sequence);\n    }\n\n    return [];\n  },\n\n  addCSSRule: (rule: string) => {\n    cssRules.push(rule);\n  },\n  addSequenceDetails: <Slots extends string | number>(classNamesForSlots: Record<Slots, string>) => {\n    Object.entries<string>(classNamesForSlots).forEach(([slotName, sequenceHash]) => {\n      sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = { slotName };\n    });\n  },\n\n  getCSSRules: (): string[] => {\n    return cssRules;\n  },\n  getSequenceDetails: (sequenceHash: SequenceHash): typeof sequenceDetails[string] | undefined => {\n    return sequenceDetails[sequenceHash];\n  },\n};\n"],"names":["sequenceDetails","cssRules","debugData","getChildrenSequences","debugSequenceHash","key","Object","keys","mergeClassesCachedResults","find","startsWith","split","SEQUENCE_PREFIX","filter","sequence","length","map","addCSSRule","rule","push","addSequenceDetails","classNamesForSlots","entries","forEach","slotName","sequenceHash","substring","SEQUENCE_SIZE","getCSSRules","getSequenceDetails"],"mappings":";;;AAIA,MAAMA,eAAe,GAA+C,EAApE;AAEA,MAAMC,QAAQ,GAAa,EAA3B;MAEaC,SAAS,GAAG;AACvBC,EAAAA,oBAAoB,EAAGC,iBAAD;AACpB,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYC,yBAAZ,EAAuCC,IAAvC,CAA4CJ,GAAG,IACzDG,yBAAyB,CAACH,GAAD,CAAzB,CAA+BK,UAA/B,CAA0CN,iBAA1C,CADU,CAAZ;;AAIA,QAAIC,GAAJ,EAAS;AACP;AACA,aAAOA,GAAG,CACPM,KADI,CACEC,eADF,EAEJC,MAFI,CAEGC,QAAQ,IAAIA,QAAQ,CAACC,MAFxB,EAGJC,GAHI,CAGAF,QAAQ,IAAIF,eAAe,GAAGE,QAH9B,CAAP;AAID;;AAED,WAAO,EAAP;AACD,GAfsB;AAiBvBG,EAAAA,UAAU,EAAGC,IAAD;AACVjB,IAAAA,QAAQ,CAACkB,IAAT,CAAcD,IAAd;AACD,GAnBsB;AAoBvBE,EAAAA,kBAAkB,EAAkCC,kBAAhC;AAClBf,IAAAA,MAAM,CAACgB,OAAP,CAAuBD,kBAAvB,EAA2CE,OAA3C,CAAmD,CAAC,CAACC,QAAD,EAAWC,YAAX,CAAD;AACjDzB,MAAAA,eAAe,CAACyB,YAAY,CAACC,SAAb,CAAuB,CAAvB,EAA0BC,aAA1B,CAAD,CAAf,GAA4D;AAAEH,QAAAA;AAAF,OAA5D;AACD,KAFD;AAGD,GAxBsB;AA0BvBI,EAAAA,WAAW,EAAE;AACX,WAAO3B,QAAP;AACD,GA5BsB;AA6BvB4B,EAAAA,kBAAkB,EAAGJ,YAAD;AAClB,WAAOzB,eAAe,CAACyB,YAAD,CAAtB;AACD;AA/BsB;;;;"}
\ No newline at end of file
+{"version":3,"file":"store.esm.js","sources":["../../../../packages/core/src/devtools/store.ts"],"sourcesContent":["import type { SequenceHash } from '../types';\nimport { SEQUENCE_PREFIX, SEQUENCE_SIZE } from '../constants';\nimport { mergeClassesCachedResults } from '../mergeClasses';\nimport type { DebugSourceLoc } from './types';\n\nconst sequenceDetails: Record<SequenceHash, { slotName: string; sourceLoc?: DebugSourceLoc }> = {};\n\nconst cssRules: string[] = [];\n\nexport const debugData = {\n  getChildrenSequences: (debugSequenceHash: SequenceHash): SequenceHash[] => {\n    const key = Object.keys(mergeClassesCachedResults).find(key =>\n      mergeClassesCachedResults[key].startsWith(debugSequenceHash),\n    );\n\n    if (key) {\n      // key of the mergeClasses cache contains merge order\n      return key\n        .split(SEQUENCE_PREFIX)\n        .filter(sequence => sequence.length)\n        .map(sequence => SEQUENCE_PREFIX + sequence);\n    }\n\n    return [];\n  },\n\n  addCSSRule: (rule: string) => {\n    cssRules.push(rule);\n  },\n  addSequenceDetails: <Slots extends string | number>(\n    classNamesForSlots: Record<Slots, string>,\n    sourceLoc?: DebugSourceLoc,\n  ) => {\n    Object.entries<string>(classNamesForSlots).forEach(([slotName, sequenceHash]) => {\n      sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = { slotName, sourceLoc };\n    });\n  },\n\n  getCSSRules: (): string[] => {\n    return cssRules;\n  },\n  getSequenceDetails: (sequenceHash: SequenceHash): typeof sequenceDetails[string] | undefined => {\n    return sequenceDetails[sequenceHash];\n  },\n};\n"],"names":["sequenceDetails","cssRules","debugData","getChildrenSequences","debugSequenceHash","key","Object","keys","mergeClassesCachedResults","find","startsWith","split","SEQUENCE_PREFIX","filter","sequence","length","map","addCSSRule","rule","push","addSequenceDetails","classNamesForSlots","sourceLoc","entries","forEach","slotName","sequenceHash","substring","SEQUENCE_SIZE","getCSSRules","getSequenceDetails"],"mappings":";;;AAKA,MAAMA,eAAe,GAA2E,EAAhG;AAEA,MAAMC,QAAQ,GAAa,EAA3B;MAEaC,SAAS,GAAG;AACvBC,EAAAA,oBAAoB,EAAGC,iBAAD;AACpB,UAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYC,yBAAZ,EAAuCC,IAAvC,CAA4CJ,GAAG,IACzDG,yBAAyB,CAACH,GAAD,CAAzB,CAA+BK,UAA/B,CAA0CN,iBAA1C,CADU,CAAZ;;AAIA,QAAIC,GAAJ,EAAS;AACP;AACA,aAAOA,GAAG,CACPM,KADI,CACEC,eADF,EAEJC,MAFI,CAEGC,QAAQ,IAAIA,QAAQ,CAACC,MAFxB,EAGJC,GAHI,CAGAF,QAAQ,IAAIF,eAAe,GAAGE,QAH9B,CAAP;AAID;;AAED,WAAO,EAAP;AACD,GAfsB;AAiBvBG,EAAAA,UAAU,EAAGC,IAAD;AACVjB,IAAAA,QAAQ,CAACkB,IAAT,CAAcD,IAAd;AACD,GAnBsB;AAoBvBE,EAAAA,kBAAkB,EAAE,CAClBC,kBADkB,EAElBC,SAFkB;AAIlBhB,IAAAA,MAAM,CAACiB,OAAP,CAAuBF,kBAAvB,EAA2CG,OAA3C,CAAmD,CAAC,CAACC,QAAD,EAAWC,YAAX,CAAD;AACjD1B,MAAAA,eAAe,CAAC0B,YAAY,CAACC,SAAb,CAAuB,CAAvB,EAA0BC,aAA1B,CAAD,CAAf,GAA4D;AAAEH,QAAAA,QAAF;AAAYH,QAAAA;AAAZ,OAA5D;AACD,KAFD;AAGD,GA3BsB;AA6BvBO,EAAAA,WAAW,EAAE;AACX,WAAO5B,QAAP;AACD,GA/BsB;AAgCvB6B,EAAAA,kBAAkB,EAAGJ,YAAD;AAClB,WAAO1B,eAAe,CAAC0B,YAAD,CAAtB;AACD;AAlCsB;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/devtools/types.d.ts b/node_modules/@griffel/core/devtools/types.d.ts
index 8619a7f..2719485 100644
--- a/node_modules/@griffel/core/devtools/types.d.ts
+++ b/node_modules/@griffel/core/devtools/types.d.ts
@@ -11,6 +11,11 @@ export declare type DebugAtomicClassName = {
     overriddenBy?: string;
 };
 export declare type DebugCSSRules = Record<string, string>;
+export declare type DebugSourceLoc = {
+    sourceURL: string;
+    lineNumber: number;
+    columnNumber: number;
+};
 export declare type DebugSequence = {
     sequenceHash: SequenceHash;
     direction: 'ltr' | 'rtl';
@@ -18,5 +23,6 @@ export declare type DebugSequence = {
     debugClassNames: DebugAtomicClassName[];
     slot?: string;
     rules?: DebugCSSRules;
+    sourceLoc?: DebugSourceLoc;
 };
 export declare type DebugResult = DebugSequence;
diff --git a/node_modules/@griffel/core/index.cjs.js b/node_modules/@griffel/core/index.cjs.js
index 05d2d2f..f0bb447 100644
--- a/node_modules/@griffel/core/index.cjs.js
+++ b/node_modules/@griffel/core/index.cjs.js
@@ -11,6 +11,7 @@ var borderColor = require('./shorthands/borderColor.cjs.js');
 var borderStyle = require('./shorthands/borderStyle.cjs.js');
 var borderRadius = require('./shorthands/borderRadius.cjs.js');
 var borderWidth = require('./shorthands/borderWidth.cjs.js');
+var flex = require('./shorthands/flex.cjs.js');
 var gap = require('./shorthands/gap.cjs.js');
 var margin = require('./shorthands/margin.cjs.js');
 var padding = require('./shorthands/padding.cjs.js');
@@ -39,6 +40,7 @@ const shorthands = {
   borderStyle: borderStyle.borderStyle,
   borderRadius: borderRadius.borderRadius,
   borderWidth: borderWidth.borderWidth,
+  flex: flex.flex,
   gap: gap.gap,
   margin: margin.margin,
   padding: padding.padding,
diff --git a/node_modules/@griffel/core/index.cjs.js.map b/node_modules/@griffel/core/index.cjs.js.map
index 26bd404..662c9c5 100644
--- a/node_modules/@griffel/core/index.cjs.js.map
+++ b/node_modules/@griffel/core/index.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs.js","sources":["../../../packages/core/src/index.ts"],"sourcesContent":["// This should be just \"export * as shorthands from \"\n// https://github.com/microsoft/fluentui/issues/20694\nimport {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n} from './shorthands/index';\n\nexport const shorthands = {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n};\n\nexport { createDOMRenderer } from './renderer/createDOMRenderer';\nexport type { CreateDOMRendererOptions } from './renderer/createDOMRenderer';\nexport { styleBucketOrdering } from './renderer/getStyleSheetForBucket';\nexport { rehydrateRendererCache } from './renderer/rehydrateRendererCache';\n\nexport { mergeClasses } from './mergeClasses';\nexport { makeStaticStyles } from './makeStaticStyles';\nexport { makeStyles } from './makeStyles';\nexport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\n\n// Private exports, are used by build time transforms\nexport { resolveStyleRules } from './runtime/resolveStyleRules';\nexport { __styles } from './__styles';\n\nexport * from './constants';\nexport type {\n  // Static styles\n  GriffelStaticStyle,\n  GriffelStaticStyles,\n  // Styles\n  GriffelAnimation,\n  GriffelStyle,\n  // Internal types\n  CSSClasses,\n  CSSClassesMapBySlot,\n  CSSRulesByBucket,\n  StyleBucketName,\n  // Util\n  MakeStaticStylesOptions,\n  MakeStylesOptions,\n  GriffelRenderer,\n} from './types';\n\n// Private exports, are used by devtools\nexport type { DebugCSSRules, DebugSequence, DebugResult } from './devtools';\n"],"names":["shorthands","border","borderLeft","borderBottom","borderRight","borderTop","borderColor","borderStyle","borderRadius","borderWidth","gap","margin","padding","overflow","inset","outline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;MAoBaA,UAAU,GAAG;AACxBC,UAAAA,aADwB;AAExBC,cAAAA,qBAFwB;AAGxBC,gBAAAA,yBAHwB;AAIxBC,eAAAA,uBAJwB;AAKxBC,aAAAA,mBALwB;AAMxBC,eAAAA,uBANwB;AAOxBC,eAAAA,uBAPwB;AAQxBC,gBAAAA,yBARwB;AASxBC,eAAAA,uBATwB;AAUxBC,OAAAA,OAVwB;AAWxBC,UAAAA,aAXwB;AAYxBC,WAAAA,eAZwB;AAaxBC,YAAAA,iBAbwB;AAcxBC,SAAAA,WAdwB;AAexBC,WAAAA;AAfwB;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.cjs.js","sources":["../../../packages/core/src/index.ts"],"sourcesContent":["// This should be just \"export * as shorthands from \"\n// https://github.com/microsoft/fluentui/issues/20694\nimport {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  flex,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n} from './shorthands/index';\n\nexport const shorthands = {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  flex,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n};\n\nexport { createDOMRenderer } from './renderer/createDOMRenderer';\nexport type { CreateDOMRendererOptions } from './renderer/createDOMRenderer';\nexport { styleBucketOrdering } from './renderer/getStyleSheetForBucket';\nexport { rehydrateRendererCache } from './renderer/rehydrateRendererCache';\n\nexport { mergeClasses } from './mergeClasses';\nexport { makeStaticStyles } from './makeStaticStyles';\nexport { makeStyles } from './makeStyles';\nexport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\n\n// Private exports, are used by build time transforms\nexport { resolveStyleRules } from './runtime/resolveStyleRules';\nexport { __styles } from './__styles';\n\nexport * from './constants';\nexport type {\n  // Static styles\n  GriffelStaticStyle,\n  GriffelStaticStyles,\n  // Styles\n  GriffelAnimation,\n  GriffelStyle,\n  // Internal types\n  CSSClasses,\n  CSSClassesMapBySlot,\n  CSSRulesByBucket,\n  StyleBucketName,\n  // Util\n  MakeStaticStylesOptions,\n  MakeStylesOptions,\n  GriffelRenderer,\n} from './types';\n\n// Private exports, are used by devtools\nexport type { DebugCSSRules, DebugSequence, DebugResult, DebugSourceLoc } from './devtools';\n"],"names":["shorthands","border","borderLeft","borderBottom","borderRight","borderTop","borderColor","borderStyle","borderRadius","borderWidth","flex","gap","margin","padding","overflow","inset","outline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;MAqBaA,UAAU,GAAG;AACxBC,UAAAA,aADwB;AAExBC,cAAAA,qBAFwB;AAGxBC,gBAAAA,yBAHwB;AAIxBC,eAAAA,uBAJwB;AAKxBC,aAAAA,mBALwB;AAMxBC,eAAAA,uBANwB;AAOxBC,eAAAA,uBAPwB;AAQxBC,gBAAAA,yBARwB;AASxBC,eAAAA,uBATwB;AAUxBC,QAAAA,SAVwB;AAWxBC,OAAAA,OAXwB;AAYxBC,UAAAA,aAZwB;AAaxBC,WAAAA,eAbwB;AAcxBC,YAAAA,iBAdwB;AAexBC,SAAAA,WAfwB;AAgBxBC,WAAAA;AAhBwB;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/index.d.ts b/node_modules/@griffel/core/index.d.ts
index 4cdf856..7e4dd5d 100644
--- a/node_modules/@griffel/core/index.d.ts
+++ b/node_modules/@griffel/core/index.d.ts
@@ -1,4 +1,4 @@
-import { border, borderLeft, borderBottom, borderRight, borderTop, borderColor, borderStyle, borderRadius, borderWidth, gap, margin, padding, overflow, inset, outline } from './shorthands/index';
+import { border, borderLeft, borderBottom, borderRight, borderTop, borderColor, borderStyle, borderRadius, borderWidth, flex, gap, margin, padding, overflow, inset, outline } from './shorthands/index';
 export declare const shorthands: {
     border: typeof border;
     borderLeft: typeof borderLeft;
@@ -9,6 +9,7 @@ export declare const shorthands: {
     borderStyle: typeof borderStyle;
     borderRadius: typeof borderRadius;
     borderWidth: typeof borderWidth;
+    flex: typeof flex;
     gap: typeof gap;
     margin: typeof margin;
     padding: typeof padding;
@@ -28,4 +29,4 @@ export { resolveStyleRules } from './runtime/resolveStyleRules';
 export { __styles } from './__styles';
 export * from './constants';
 export type { GriffelStaticStyle, GriffelStaticStyles, GriffelAnimation, GriffelStyle, CSSClasses, CSSClassesMapBySlot, CSSRulesByBucket, StyleBucketName, MakeStaticStylesOptions, MakeStylesOptions, GriffelRenderer, } from './types';
-export type { DebugCSSRules, DebugSequence, DebugResult } from './devtools';
+export type { DebugCSSRules, DebugSequence, DebugResult, DebugSourceLoc } from './devtools';
diff --git a/node_modules/@griffel/core/index.esm.js b/node_modules/@griffel/core/index.esm.js
index db308f2..b4d4f1c 100644
--- a/node_modules/@griffel/core/index.esm.js
+++ b/node_modules/@griffel/core/index.esm.js
@@ -7,6 +7,7 @@ import { borderColor } from './shorthands/borderColor.esm.js';
 import { borderStyle } from './shorthands/borderStyle.esm.js';
 import { borderRadius } from './shorthands/borderRadius.esm.js';
 import { borderWidth } from './shorthands/borderWidth.esm.js';
+import { flex } from './shorthands/flex.esm.js';
 import { gap } from './shorthands/gap.esm.js';
 import { margin } from './shorthands/margin.esm.js';
 import { padding } from './shorthands/padding.esm.js';
@@ -35,6 +36,7 @@ const shorthands = {
   borderStyle,
   borderRadius,
   borderWidth,
+  flex,
   gap,
   margin,
   padding,
diff --git a/node_modules/@griffel/core/index.esm.js.map b/node_modules/@griffel/core/index.esm.js.map
index 8de6e93..bde3a37 100644
--- a/node_modules/@griffel/core/index.esm.js.map
+++ b/node_modules/@griffel/core/index.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.esm.js","sources":["../../../packages/core/src/index.ts"],"sourcesContent":["// This should be just \"export * as shorthands from \"\n// https://github.com/microsoft/fluentui/issues/20694\nimport {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n} from './shorthands/index';\n\nexport const shorthands = {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n};\n\nexport { createDOMRenderer } from './renderer/createDOMRenderer';\nexport type { CreateDOMRendererOptions } from './renderer/createDOMRenderer';\nexport { styleBucketOrdering } from './renderer/getStyleSheetForBucket';\nexport { rehydrateRendererCache } from './renderer/rehydrateRendererCache';\n\nexport { mergeClasses } from './mergeClasses';\nexport { makeStaticStyles } from './makeStaticStyles';\nexport { makeStyles } from './makeStyles';\nexport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\n\n// Private exports, are used by build time transforms\nexport { resolveStyleRules } from './runtime/resolveStyleRules';\nexport { __styles } from './__styles';\n\nexport * from './constants';\nexport type {\n  // Static styles\n  GriffelStaticStyle,\n  GriffelStaticStyles,\n  // Styles\n  GriffelAnimation,\n  GriffelStyle,\n  // Internal types\n  CSSClasses,\n  CSSClassesMapBySlot,\n  CSSRulesByBucket,\n  StyleBucketName,\n  // Util\n  MakeStaticStylesOptions,\n  MakeStylesOptions,\n  GriffelRenderer,\n} from './types';\n\n// Private exports, are used by devtools\nexport type { DebugCSSRules, DebugSequence, DebugResult } from './devtools';\n"],"names":["shorthands","border","borderLeft","borderBottom","borderRight","borderTop","borderColor","borderStyle","borderRadius","borderWidth","gap","margin","padding","overflow","inset","outline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;MAoBaA,UAAU,GAAG;AACxBC,EAAAA,MADwB;AAExBC,EAAAA,UAFwB;AAGxBC,EAAAA,YAHwB;AAIxBC,EAAAA,WAJwB;AAKxBC,EAAAA,SALwB;AAMxBC,EAAAA,WANwB;AAOxBC,EAAAA,WAPwB;AAQxBC,EAAAA,YARwB;AASxBC,EAAAA,WATwB;AAUxBC,EAAAA,GAVwB;AAWxBC,EAAAA,MAXwB;AAYxBC,EAAAA,OAZwB;AAaxBC,EAAAA,QAbwB;AAcxBC,EAAAA,KAdwB;AAexBC,EAAAA;AAfwB;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.esm.js","sources":["../../../packages/core/src/index.ts"],"sourcesContent":["// This should be just \"export * as shorthands from \"\n// https://github.com/microsoft/fluentui/issues/20694\nimport {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  flex,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n} from './shorthands/index';\n\nexport const shorthands = {\n  border,\n  borderLeft,\n  borderBottom,\n  borderRight,\n  borderTop,\n  borderColor,\n  borderStyle,\n  borderRadius,\n  borderWidth,\n  flex,\n  gap,\n  margin,\n  padding,\n  overflow,\n  inset,\n  outline,\n};\n\nexport { createDOMRenderer } from './renderer/createDOMRenderer';\nexport type { CreateDOMRendererOptions } from './renderer/createDOMRenderer';\nexport { styleBucketOrdering } from './renderer/getStyleSheetForBucket';\nexport { rehydrateRendererCache } from './renderer/rehydrateRendererCache';\n\nexport { mergeClasses } from './mergeClasses';\nexport { makeStaticStyles } from './makeStaticStyles';\nexport { makeStyles } from './makeStyles';\nexport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\n\n// Private exports, are used by build time transforms\nexport { resolveStyleRules } from './runtime/resolveStyleRules';\nexport { __styles } from './__styles';\n\nexport * from './constants';\nexport type {\n  // Static styles\n  GriffelStaticStyle,\n  GriffelStaticStyles,\n  // Styles\n  GriffelAnimation,\n  GriffelStyle,\n  // Internal types\n  CSSClasses,\n  CSSClassesMapBySlot,\n  CSSRulesByBucket,\n  StyleBucketName,\n  // Util\n  MakeStaticStylesOptions,\n  MakeStylesOptions,\n  GriffelRenderer,\n} from './types';\n\n// Private exports, are used by devtools\nexport type { DebugCSSRules, DebugSequence, DebugResult, DebugSourceLoc } from './devtools';\n"],"names":["shorthands","border","borderLeft","borderBottom","borderRight","borderTop","borderColor","borderStyle","borderRadius","borderWidth","flex","gap","margin","padding","overflow","inset","outline"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;MAqBaA,UAAU,GAAG;AACxBC,EAAAA,MADwB;AAExBC,EAAAA,UAFwB;AAGxBC,EAAAA,YAHwB;AAIxBC,EAAAA,WAJwB;AAKxBC,EAAAA,SALwB;AAMxBC,EAAAA,WANwB;AAOxBC,EAAAA,WAPwB;AAQxBC,EAAAA,YARwB;AASxBC,EAAAA,WATwB;AAUxBC,EAAAA,IAVwB;AAWxBC,EAAAA,GAXwB;AAYxBC,EAAAA,MAZwB;AAaxBC,EAAAA,OAbwB;AAcxBC,EAAAA,QAdwB;AAexBC,EAAAA,KAfwB;AAgBxBC,EAAAA;AAhBwB;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/makeStyles.cjs.js b/node_modules/@griffel/core/makeStyles.cjs.js
index 22864ed..f356615 100644
--- a/node_modules/@griffel/core/makeStyles.cjs.js
+++ b/node_modules/@griffel/core/makeStyles.cjs.js
@@ -5,6 +5,7 @@ Object.defineProperty(exports, '__esModule', { value: true });
 require('./constants.cjs.js');
 var store = require('./devtools/store.cjs.js');
 var isDevToolsEnabled = require('./devtools/isDevToolsEnabled.cjs.js');
+var getSourceLocation = require('./devtools/getSourceLocation.cjs.js');
 var resolveStyleRulesForSlots = require('./resolveStyleRulesForSlots.cjs.js');
 var reduceToClassNameForSlots = require('./runtime/reduceToClassNameForSlots.cjs.js');
 
@@ -14,6 +15,11 @@ function makeStyles(stylesBySlots) {
   let cssRules = null;
   let ltrClassNamesForSlots = null;
   let rtlClassNamesForSlots = null;
+  let sourceLocation;
+
+  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled.isDevToolsEnabled) {
+    sourceLocation = getSourceLocation.getSourceLocation(true);
+  }
 
   function computeClasses(options) {
     const {
@@ -47,7 +53,7 @@ function makeStyles(stylesBySlots) {
     const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
 
     if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled.isDevToolsEnabled) {
-      store.debugData.addSequenceDetails(classNamesForSlots);
+      store.debugData.addSequenceDetails(classNamesForSlots, sourceLocation);
     }
 
     return classNamesForSlots;
diff --git a/node_modules/@griffel/core/makeStyles.cjs.js.map b/node_modules/@griffel/core/makeStyles.cjs.js.map
index 07ddbea..31936e3 100644
--- a/node_modules/@griffel/core/makeStyles.cjs.js.map
+++ b/node_modules/@griffel/core/makeStyles.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"makeStyles.cjs.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled } from './devtools';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMapBySlot, CSSRulesByBucket, MakeStylesOptions, StylesBySlots } from './types';\n\nexport function makeStyles<Slots extends string | number>(stylesBySlots: StylesBySlots<Slots>) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","insertionCache","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","process","env","NODE_ENV","isDevToolsEnabled","debugData","addSequenceDetails"],"mappings":";;;;;;;;;;SAKgBA,WAA0CC;AACxD,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,gBAAgB,GAAsC,IAA1D;AACA,MAAIC,QAAQ,GAA4B,IAAxC;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;;AAEA,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;;AAEA,QAAIL,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,OAACA,gBAAD,EAAmBC,QAAnB,IAA+BO,mDAAyB,CAACV,aAAD,CAAxD;AACD;;AAED,UAAMW,KAAK,GAAGH,GAAG,KAAK,KAAtB;;AAEA,UAAMI,UAAU,GAAGD,KAAK,GAAGF,QAAQ,CAACI,EAAZ,GAAiBJ,QAAQ,CAACI,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIP,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGU,mDAAyB,CAACZ,gBAAD,EAAmBM,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIH,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGS,mDAAyB,CAACZ,gBAAD,EAAmBM,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIP,cAAc,CAACW,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CN,MAAAA,QAAQ,CAACO,cAAT,CAAwBb,QAAxB;AACAF,MAAAA,cAAc,CAACW,UAAD,CAAd,GAA6B,IAA7B;AACD;;AACD,UAAMK,kBAAkB,GAAGN,KAAK,GAC3BP,qBAD2B,GAE3BC,qBAFL;;AAIA,QAAIa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;AAC9DC,MAAAA,eAAS,CAACC,kBAAV,CAA6BN,kBAA7B;AACD;;AAED,WAAOA,kBAAP;AACD;;AAED,SAAOX,cAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"makeStyles.cjs.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, DebugSourceLoc, isDevToolsEnabled, getSourceLocation } from './devtools';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMapBySlot, CSSRulesByBucket, MakeStylesOptions, StylesBySlots } from './types';\n\nexport function makeStyles<Slots extends string | number>(stylesBySlots: StylesBySlots<Slots>) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceLocation: DebugSourceLoc | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceLocation = getSourceLocation(true);\n  }\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceLocation);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","insertionCache","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceLocation","process","env","NODE_ENV","isDevToolsEnabled","getSourceLocation","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;;;;;SAKgBA,WAA0CC;AACxD,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,gBAAgB,GAAsC,IAA1D;AACA,MAAIC,QAAQ,GAA4B,IAAxC;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;AAEA,MAAIC,cAAJ;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;AAC9DJ,IAAAA,cAAc,GAAGK,mCAAiB,CAAC,IAAD,CAAlC;AACD;;AAED,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;;AAEA,QAAIX,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,OAACA,gBAAD,EAAmBC,QAAnB,IAA+Ba,mDAAyB,CAAChB,aAAD,CAAxD;AACD;;AAED,UAAMiB,KAAK,GAAGH,GAAG,KAAK,KAAtB;;AAEA,UAAMI,UAAU,GAAGD,KAAK,GAAGF,QAAQ,CAACI,EAAZ,GAAiBJ,QAAQ,CAACI,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIb,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGgB,mDAAyB,CAAClB,gBAAD,EAAmBY,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIT,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGe,mDAAyB,CAAClB,gBAAD,EAAmBY,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIb,cAAc,CAACiB,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CN,MAAAA,QAAQ,CAACO,cAAT,CAAwBnB,QAAxB;AACAF,MAAAA,cAAc,CAACiB,UAAD,CAAd,GAA6B,IAA7B;AACD;;AACD,UAAMK,kBAAkB,GAAGN,KAAK,GAC3Bb,qBAD2B,GAE3BC,qBAFL;;AAIA,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,mCAA7C,EAAgE;AAC9Dc,MAAAA,eAAS,CAACC,kBAAV,CAA6BF,kBAA7B,EAAkDjB,cAAlD;AACD;;AAED,WAAOiB,kBAAP;AACD;;AAED,SAAOX,cAAP;AACD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/makeStyles.esm.js b/node_modules/@griffel/core/makeStyles.esm.js
index 67f56c4..1047696 100644
--- a/node_modules/@griffel/core/makeStyles.esm.js
+++ b/node_modules/@griffel/core/makeStyles.esm.js
@@ -1,6 +1,7 @@
 import './constants.esm.js';
 import { debugData } from './devtools/store.esm.js';
 import { isDevToolsEnabled } from './devtools/isDevToolsEnabled.esm.js';
+import { getSourceLocation } from './devtools/getSourceLocation.esm.js';
 import { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots.esm.js';
 import { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots.esm.js';
 
@@ -10,6 +11,11 @@ function makeStyles(stylesBySlots) {
   let cssRules = null;
   let ltrClassNamesForSlots = null;
   let rtlClassNamesForSlots = null;
+  let sourceLocation;
+
+  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {
+    sourceLocation = getSourceLocation(true);
+  }
 
   function computeClasses(options) {
     const {
@@ -43,7 +49,7 @@ function makeStyles(stylesBySlots) {
     const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
 
     if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {
-      debugData.addSequenceDetails(classNamesForSlots);
+      debugData.addSequenceDetails(classNamesForSlots, sourceLocation);
     }
 
     return classNamesForSlots;
diff --git a/node_modules/@griffel/core/makeStyles.esm.js.map b/node_modules/@griffel/core/makeStyles.esm.js.map
index d30a712..ad080c9 100644
--- a/node_modules/@griffel/core/makeStyles.esm.js.map
+++ b/node_modules/@griffel/core/makeStyles.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"makeStyles.esm.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, isDevToolsEnabled } from './devtools';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMapBySlot, CSSRulesByBucket, MakeStylesOptions, StylesBySlots } from './types';\n\nexport function makeStyles<Slots extends string | number>(stylesBySlots: StylesBySlots<Slots>) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","insertionCache","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","process","env","NODE_ENV","isDevToolsEnabled","debugData","addSequenceDetails"],"mappings":";;;;;;SAKgBA,WAA0CC;AACxD,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,gBAAgB,GAAsC,IAA1D;AACA,MAAIC,QAAQ,GAA4B,IAAxC;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;;AAEA,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;;AAEA,QAAIL,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,OAACA,gBAAD,EAAmBC,QAAnB,IAA+BO,yBAAyB,CAACV,aAAD,CAAxD;AACD;;AAED,UAAMW,KAAK,GAAGH,GAAG,KAAK,KAAtB;;AAEA,UAAMI,UAAU,GAAGD,KAAK,GAAGF,QAAQ,CAACI,EAAZ,GAAiBJ,QAAQ,CAACI,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIP,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGU,yBAAyB,CAACZ,gBAAD,EAAmBM,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIH,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGS,yBAAyB,CAACZ,gBAAD,EAAmBM,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIP,cAAc,CAACW,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CN,MAAAA,QAAQ,CAACO,cAAT,CAAwBb,QAAxB;AACAF,MAAAA,cAAc,CAACW,UAAD,CAAd,GAA6B,IAA7B;AACD;;AACD,UAAMK,kBAAkB,GAAGN,KAAK,GAC3BP,qBAD2B,GAE3BC,qBAFL;;AAIA,QAAIa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,iBAA7C,EAAgE;AAC9DC,MAAAA,SAAS,CAACC,kBAAV,CAA6BN,kBAA7B;AACD;;AAED,WAAOA,kBAAP;AACD;;AAED,SAAOX,cAAP;AACD;;;;"}
\ No newline at end of file
+{"version":3,"file":"makeStyles.esm.js","sources":["../../../packages/core/src/makeStyles.ts"],"sourcesContent":["import { debugData, DebugSourceLoc, isDevToolsEnabled, getSourceLocation } from './devtools';\nimport { resolveStyleRulesForSlots } from './resolveStyleRulesForSlots';\nimport { reduceToClassNameForSlots } from './runtime/reduceToClassNameForSlots';\nimport { CSSClassesMapBySlot, CSSRulesByBucket, MakeStylesOptions, StylesBySlots } from './types';\n\nexport function makeStyles<Slots extends string | number>(stylesBySlots: StylesBySlots<Slots>) {\n  const insertionCache: Record<string, boolean> = {};\n\n  let classesMapBySlot: CSSClassesMapBySlot<Slots> | null = null;\n  let cssRules: CSSRulesByBucket | null = null;\n\n  let ltrClassNamesForSlots: Record<Slots, string> | null = null;\n  let rtlClassNamesForSlots: Record<Slots, string> | null = null;\n\n  let sourceLocation: DebugSourceLoc | undefined;\n  if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n    sourceLocation = getSourceLocation(true);\n  }\n\n  function computeClasses(options: MakeStylesOptions): Record<Slots, string> {\n    const { dir, renderer } = options;\n\n    if (classesMapBySlot === null) {\n      [classesMapBySlot, cssRules] = resolveStyleRulesForSlots(stylesBySlots);\n    }\n\n    const isLTR = dir === 'ltr';\n    // As RTL classes are different they should have a different cache key for insertion\n    const rendererId = isLTR ? renderer.id : renderer.id + 'r';\n\n    if (isLTR) {\n      if (ltrClassNamesForSlots === null) {\n        ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    } else {\n      if (rtlClassNamesForSlots === null) {\n        rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);\n      }\n    }\n\n    if (insertionCache[rendererId] === undefined) {\n      renderer.insertCSSRules(cssRules!);\n      insertionCache[rendererId] = true;\n    }\n    const classNamesForSlots = isLTR\n      ? (ltrClassNamesForSlots as Record<Slots, string>)\n      : (rtlClassNamesForSlots as Record<Slots, string>);\n\n    if (process.env.NODE_ENV !== 'production' && isDevToolsEnabled) {\n      debugData.addSequenceDetails(classNamesForSlots!, sourceLocation);\n    }\n\n    return classNamesForSlots;\n  }\n\n  return computeClasses;\n}\n"],"names":["makeStyles","stylesBySlots","insertionCache","classesMapBySlot","cssRules","ltrClassNamesForSlots","rtlClassNamesForSlots","sourceLocation","process","env","NODE_ENV","isDevToolsEnabled","getSourceLocation","computeClasses","options","dir","renderer","resolveStyleRulesForSlots","isLTR","rendererId","id","reduceToClassNameForSlots","undefined","insertCSSRules","classNamesForSlots","debugData","addSequenceDetails"],"mappings":";;;;;;;SAKgBA,WAA0CC;AACxD,QAAMC,cAAc,GAA4B,EAAhD;AAEA,MAAIC,gBAAgB,GAAsC,IAA1D;AACA,MAAIC,QAAQ,GAA4B,IAAxC;AAEA,MAAIC,qBAAqB,GAAiC,IAA1D;AACA,MAAIC,qBAAqB,GAAiC,IAA1D;AAEA,MAAIC,cAAJ;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,iBAA7C,EAAgE;AAC9DJ,IAAAA,cAAc,GAAGK,iBAAiB,CAAC,IAAD,CAAlC;AACD;;AAED,WAASC,cAAT,CAAwBC,OAAxB;AACE,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAoBF,OAA1B;;AAEA,QAAIX,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,OAACA,gBAAD,EAAmBC,QAAnB,IAA+Ba,yBAAyB,CAAChB,aAAD,CAAxD;AACD;;AAED,UAAMiB,KAAK,GAAGH,GAAG,KAAK,KAAtB;;AAEA,UAAMI,UAAU,GAAGD,KAAK,GAAGF,QAAQ,CAACI,EAAZ,GAAiBJ,QAAQ,CAACI,EAAT,GAAc,GAAvD;;AAEA,QAAIF,KAAJ,EAAW;AACT,UAAIb,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGgB,yBAAyB,CAAClB,gBAAD,EAAmBY,GAAnB,CAAjD;AACD;AACF,KAJD,MAIO;AACL,UAAIT,qBAAqB,KAAK,IAA9B,EAAoC;AAClCA,QAAAA,qBAAqB,GAAGe,yBAAyB,CAAClB,gBAAD,EAAmBY,GAAnB,CAAjD;AACD;AACF;;AAED,QAAIb,cAAc,CAACiB,UAAD,CAAd,KAA+BG,SAAnC,EAA8C;AAC5CN,MAAAA,QAAQ,CAACO,cAAT,CAAwBnB,QAAxB;AACAF,MAAAA,cAAc,CAACiB,UAAD,CAAd,GAA6B,IAA7B;AACD;;AACD,UAAMK,kBAAkB,GAAGN,KAAK,GAC3Bb,qBAD2B,GAE3BC,qBAFL;;AAIA,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCC,iBAA7C,EAAgE;AAC9Dc,MAAAA,SAAS,CAACC,kBAAV,CAA6BF,kBAA7B,EAAkDjB,cAAlD;AACD;;AAED,WAAOiB,kBAAP;AACD;;AAED,SAAOX,cAAP;AACD;;;;"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/shorthands/flex.cjs.js b/node_modules/@griffel/core/shorthands/flex.cjs.js
new file mode 100644
index 0000000..be18cc4
--- /dev/null
+++ b/node_modules/@griffel/core/shorthands/flex.cjs.js
@@ -0,0 +1,120 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+const isUnit = value => typeof value === 'string' && /(\d+(\w+|%))/.test(value);
+
+const isUnitless = value => typeof value === 'number' && !Number.isNaN(value);
+
+const isInitial = value => value === 'initial';
+
+const isAuto = value => value === 'auto';
+
+const isNone = value => value === 'none';
+
+const widthReservedKeys = ['content', 'fit-content', 'max-content', 'min-content'];
+
+const isWidth = value => widthReservedKeys.some(key => value === key) || isUnit(value);
+/**
+ * A function that implements CSS spec conformant expansion for "flex".
+ *
+ * @example
+ *   flex('auto')
+ *   flex(1, '2.5rem')
+ *   flex(0, 0, 'auto')
+ *
+ * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex
+ */
+
+
+function flex(...values) {
+  const isOneValueSyntax = values.length === 1;
+  const isTwoValueSyntax = values.length === 2;
+  const isThreeValueSyntax = values.length === 3;
+
+  if (isOneValueSyntax) {
+    const [firstValue] = values;
+
+    if (isInitial(firstValue)) {
+      return {
+        flexGrow: 0,
+        flexShrink: 1,
+        flexBasis: 'auto'
+      };
+    }
+
+    if (isAuto(firstValue)) {
+      return {
+        flexGrow: 1,
+        flexShrink: 1,
+        flexBasis: 'auto'
+      };
+    }
+
+    if (isNone(firstValue)) {
+      return {
+        flexGrow: 0,
+        flexShrink: 0,
+        flexBasis: 'auto'
+      };
+    }
+
+    if (isUnitless(firstValue)) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: 1,
+        flexBasis: 0
+      };
+    }
+
+    if (isWidth(firstValue)) {
+      return {
+        flexGrow: 1,
+        flexShrink: 1,
+        flexBasis: firstValue
+      };
+    }
+  }
+
+  if (isTwoValueSyntax) {
+    const [firstValue, secondValue] = values;
+
+    if (isUnitless(secondValue)) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: secondValue,
+        flexBasis: 0
+      };
+    }
+
+    if (isWidth(secondValue)) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: 1,
+        flexBasis: secondValue
+      };
+    }
+  }
+
+  if (isThreeValueSyntax) {
+    const [firstValue, secondValue, thirdValue] = values;
+
+    if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: secondValue,
+        flexBasis: thirdValue
+      };
+    }
+  }
+
+  if (process.env.NODE_ENV !== 'production') {
+    // eslint-disable-next-line no-console
+    console.error(`The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`);
+  }
+
+  return {};
+}
+
+exports.flex = flex;
+//# sourceMappingURL=flex.cjs.js.map
diff --git a/node_modules/@griffel/core/shorthands/flex.cjs.js.map b/node_modules/@griffel/core/shorthands/flex.cjs.js.map
new file mode 100644
index 0000000..9a3f0aa
--- /dev/null
+++ b/node_modules/@griffel/core/shorthands/flex.cjs.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"flex.cjs.js","sources":["../../../../packages/core/src/shorthands/flex.ts"],"sourcesContent":["import * as CSS from 'csstype';\nimport type { GriffelStylesStrictCSSObject } from '../types';\nimport { FlexInput } from './types';\n\ntype FlexStyle = Pick<GriffelStylesStrictCSSObject, 'flexGrow' | 'flexShrink' | 'flexBasis'>;\n\nconst isUnit = (value: CSS.Property.Flex | undefined) => typeof value === 'string' && /(\\d+(\\w+|%))/.test(value);\n\nconst isUnitless = (value: CSS.Property.Flex | undefined) => typeof value === 'number' && !Number.isNaN(value);\n\nconst isInitial = (value: CSS.Property.Flex | undefined) => value === 'initial';\n\nconst isAuto = (value: CSS.Property.Flex | undefined) => value === 'auto';\n\nconst isNone = (value: CSS.Property.Flex | undefined) => value === 'none';\n\nconst widthReservedKeys = ['content', 'fit-content', 'max-content', 'min-content'] as const;\ntype ReservedKeys = typeof widthReservedKeys[number];\ntype Width = ReservedKeys | string;\nconst isWidth = (value: CSS.Property.Flex | undefined) => widthReservedKeys.some(key => value === key) || isUnit(value);\n\n/**\n * A function that implements CSS spec conformant expansion for \"flex\".\n *\n * @example\n *   flex('auto')\n *   flex(1, '2.5rem')\n *   flex(0, 0, 'auto')\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex\n */\nexport function flex(...values: FlexInput): FlexStyle {\n  const isOneValueSyntax = values.length === 1;\n  const isTwoValueSyntax = values.length === 2;\n  const isThreeValueSyntax = values.length === 3;\n\n  if (isOneValueSyntax) {\n    const [firstValue] = values;\n\n    if (isInitial(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 1,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isAuto(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isNone(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isUnitless(firstValue)) {\n      return {\n        flexGrow: firstValue as number,\n        flexShrink: 1,\n        flexBasis: 0,\n      };\n    }\n\n    if (isWidth(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: firstValue as Width,\n      };\n    }\n  }\n\n  if (isTwoValueSyntax) {\n    const [firstValue, secondValue] = values;\n\n    if (isUnitless(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: 0,\n      };\n    }\n\n    if (isWidth(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: 1,\n        flexBasis: secondValue as Width,\n      };\n    }\n  }\n\n  if (isThreeValueSyntax) {\n    const [firstValue, secondValue, thirdValue] = values;\n\n    if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: thirdValue as Width,\n      };\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error(\n      `The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`,\n    );\n  }\n  return {};\n}\n"],"names":["isUnit","value","test","isUnitless","Number","isNaN","isInitial","isAuto","isNone","widthReservedKeys","isWidth","some","key","flex","values","isOneValueSyntax","length","isTwoValueSyntax","isThreeValueSyntax","firstValue","flexGrow","flexShrink","flexBasis","secondValue","thirdValue","process","env","NODE_ENV","console","error"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/shorthands/flex.d.ts b/node_modules/@griffel/core/shorthands/flex.d.ts
new file mode 100644
index 0000000..a96e739
--- /dev/null
+++ b/node_modules/@griffel/core/shorthands/flex.d.ts
@@ -0,0 +1,15 @@
+import type { GriffelStylesStrictCSSObject } from '../types';
+import { FlexInput } from './types';
+declare type FlexStyle = Pick<GriffelStylesStrictCSSObject, 'flexGrow' | 'flexShrink' | 'flexBasis'>;
+/**
+ * A function that implements CSS spec conformant expansion for "flex".
+ *
+ * @example
+ *   flex('auto')
+ *   flex(1, '2.5rem')
+ *   flex(0, 0, 'auto')
+ *
+ * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex
+ */
+export declare function flex(...values: FlexInput): FlexStyle;
+export {};
diff --git a/node_modules/@griffel/core/shorthands/flex.esm.js b/node_modules/@griffel/core/shorthands/flex.esm.js
new file mode 100644
index 0000000..8e76674
--- /dev/null
+++ b/node_modules/@griffel/core/shorthands/flex.esm.js
@@ -0,0 +1,116 @@
+const isUnit = value => typeof value === 'string' && /(\d+(\w+|%))/.test(value);
+
+const isUnitless = value => typeof value === 'number' && !Number.isNaN(value);
+
+const isInitial = value => value === 'initial';
+
+const isAuto = value => value === 'auto';
+
+const isNone = value => value === 'none';
+
+const widthReservedKeys = ['content', 'fit-content', 'max-content', 'min-content'];
+
+const isWidth = value => widthReservedKeys.some(key => value === key) || isUnit(value);
+/**
+ * A function that implements CSS spec conformant expansion for "flex".
+ *
+ * @example
+ *   flex('auto')
+ *   flex(1, '2.5rem')
+ *   flex(0, 0, 'auto')
+ *
+ * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex
+ */
+
+
+function flex(...values) {
+  const isOneValueSyntax = values.length === 1;
+  const isTwoValueSyntax = values.length === 2;
+  const isThreeValueSyntax = values.length === 3;
+
+  if (isOneValueSyntax) {
+    const [firstValue] = values;
+
+    if (isInitial(firstValue)) {
+      return {
+        flexGrow: 0,
+        flexShrink: 1,
+        flexBasis: 'auto'
+      };
+    }
+
+    if (isAuto(firstValue)) {
+      return {
+        flexGrow: 1,
+        flexShrink: 1,
+        flexBasis: 'auto'
+      };
+    }
+
+    if (isNone(firstValue)) {
+      return {
+        flexGrow: 0,
+        flexShrink: 0,
+        flexBasis: 'auto'
+      };
+    }
+
+    if (isUnitless(firstValue)) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: 1,
+        flexBasis: 0
+      };
+    }
+
+    if (isWidth(firstValue)) {
+      return {
+        flexGrow: 1,
+        flexShrink: 1,
+        flexBasis: firstValue
+      };
+    }
+  }
+
+  if (isTwoValueSyntax) {
+    const [firstValue, secondValue] = values;
+
+    if (isUnitless(secondValue)) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: secondValue,
+        flexBasis: 0
+      };
+    }
+
+    if (isWidth(secondValue)) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: 1,
+        flexBasis: secondValue
+      };
+    }
+  }
+
+  if (isThreeValueSyntax) {
+    const [firstValue, secondValue, thirdValue] = values;
+
+    if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {
+      return {
+        flexGrow: firstValue,
+        flexShrink: secondValue,
+        flexBasis: thirdValue
+      };
+    }
+  }
+
+  if (process.env.NODE_ENV !== 'production') {
+    // eslint-disable-next-line no-console
+    console.error(`The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`);
+  }
+
+  return {};
+}
+
+export { flex };
+//# sourceMappingURL=flex.esm.js.map
diff --git a/node_modules/@griffel/core/shorthands/flex.esm.js.map b/node_modules/@griffel/core/shorthands/flex.esm.js.map
new file mode 100644
index 0000000..94d1d3a
--- /dev/null
+++ b/node_modules/@griffel/core/shorthands/flex.esm.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"flex.esm.js","sources":["../../../../packages/core/src/shorthands/flex.ts"],"sourcesContent":["import * as CSS from 'csstype';\nimport type { GriffelStylesStrictCSSObject } from '../types';\nimport { FlexInput } from './types';\n\ntype FlexStyle = Pick<GriffelStylesStrictCSSObject, 'flexGrow' | 'flexShrink' | 'flexBasis'>;\n\nconst isUnit = (value: CSS.Property.Flex | undefined) => typeof value === 'string' && /(\\d+(\\w+|%))/.test(value);\n\nconst isUnitless = (value: CSS.Property.Flex | undefined) => typeof value === 'number' && !Number.isNaN(value);\n\nconst isInitial = (value: CSS.Property.Flex | undefined) => value === 'initial';\n\nconst isAuto = (value: CSS.Property.Flex | undefined) => value === 'auto';\n\nconst isNone = (value: CSS.Property.Flex | undefined) => value === 'none';\n\nconst widthReservedKeys = ['content', 'fit-content', 'max-content', 'min-content'] as const;\ntype ReservedKeys = typeof widthReservedKeys[number];\ntype Width = ReservedKeys | string;\nconst isWidth = (value: CSS.Property.Flex | undefined) => widthReservedKeys.some(key => value === key) || isUnit(value);\n\n/**\n * A function that implements CSS spec conformant expansion for \"flex\".\n *\n * @example\n *   flex('auto')\n *   flex(1, '2.5rem')\n *   flex(0, 0, 'auto')\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/flex\n */\nexport function flex(...values: FlexInput): FlexStyle {\n  const isOneValueSyntax = values.length === 1;\n  const isTwoValueSyntax = values.length === 2;\n  const isThreeValueSyntax = values.length === 3;\n\n  if (isOneValueSyntax) {\n    const [firstValue] = values;\n\n    if (isInitial(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 1,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isAuto(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isNone(firstValue)) {\n      return {\n        flexGrow: 0,\n        flexShrink: 0,\n        flexBasis: 'auto',\n      };\n    }\n\n    if (isUnitless(firstValue)) {\n      return {\n        flexGrow: firstValue as number,\n        flexShrink: 1,\n        flexBasis: 0,\n      };\n    }\n\n    if (isWidth(firstValue)) {\n      return {\n        flexGrow: 1,\n        flexShrink: 1,\n        flexBasis: firstValue as Width,\n      };\n    }\n  }\n\n  if (isTwoValueSyntax) {\n    const [firstValue, secondValue] = values;\n\n    if (isUnitless(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: 0,\n      };\n    }\n\n    if (isWidth(secondValue)) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: 1,\n        flexBasis: secondValue as Width,\n      };\n    }\n  }\n\n  if (isThreeValueSyntax) {\n    const [firstValue, secondValue, thirdValue] = values;\n\n    if (isUnitless(firstValue) && isUnitless(secondValue) && (isAuto(thirdValue) || isWidth(thirdValue))) {\n      return {\n        flexGrow: firstValue,\n        flexShrink: secondValue,\n        flexBasis: thirdValue as Width,\n      };\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.error(\n      `The value passed to shorthands.flex did not match any flex property specs. The CSS styles were not generated. Please, check the flex documentation.`,\n    );\n  }\n  return {};\n}\n"],"names":["isUnit","value","test","isUnitless","Number","isNaN","isInitial","isAuto","isNone","widthReservedKeys","isWidth","some","key","flex","values","isOneValueSyntax","length","isTwoValueSyntax","isThreeValueSyntax","firstValue","flexGrow","flexShrink","flexBasis","secondValue","thirdValue","process","env","NODE_ENV","console","error"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@griffel/core/shorthands/index.d.ts b/node_modules/@griffel/core/shorthands/index.d.ts
index 230a57b..f88549d 100644
--- a/node_modules/@griffel/core/shorthands/index.d.ts
+++ b/node_modules/@griffel/core/shorthands/index.d.ts
@@ -7,6 +7,7 @@ export { borderColor } from './borderColor';
 export { borderStyle } from './borderStyle';
 export { borderRadius } from './borderRadius';
 export { borderWidth } from './borderWidth';
+export { flex } from './flex';
 export { gap } from './gap';
 export { margin } from './margin';
 export { padding } from './padding';
diff --git a/node_modules/@griffel/core/shorthands/types.d.ts b/node_modules/@griffel/core/shorthands/types.d.ts
index 46ee289..bf83b5c 100644
--- a/node_modules/@griffel/core/shorthands/types.d.ts
+++ b/node_modules/@griffel/core/shorthands/types.d.ts
@@ -12,3 +12,4 @@ export declare type MarginInput = ValueOrArray<CSS.Property.Margin<GriffelStyles
 export declare type OverflowInput = ValueOrArray<CSS.Property.Overflow>;
 export declare type PaddingInput = ValueOrArray<CSS.Property.Padding<GriffelStylesCSSValue>>;
 export declare type InsetInput = ValueOrArray<CSS.Property.Inset<GriffelStylesCSSValue>>;
+export declare type FlexInput = [CSS.Property.Flex, CSS.Property.Flex?, CSS.Property.Flex?];
